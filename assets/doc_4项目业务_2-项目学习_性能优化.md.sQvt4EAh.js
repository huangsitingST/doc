import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.DD4G2i-B.js";const l="/doc/assets/image-20250512110211259.C7nA_unA.png",h="/doc/assets/image-20250512141435800.DKmApc_3.png",n="/doc/assets/image-20250519142027300.ajWPpayt.png",y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/4项目业务/2-项目学习/性能优化.md","filePath":"doc/4项目业务/2-项目学习/性能优化.md"}'),p={name:"doc/4项目业务/2-项目学习/性能优化.md"};function k(r,s,d,o,E,c){return t(),a("div",null,s[0]||(s[0]=[e('<h2 id="_1、请求资源优化" tabindex="-1">1、请求资源优化 <a class="header-anchor" href="#_1、请求资源优化" aria-label="Permalink to &quot;1、请求资源优化&quot;">​</a></h2><h3 id="_1-0-实践" tabindex="-1">1-0 实践 <a class="header-anchor" href="#_1-0-实践" aria-label="Permalink to &quot;1-0 实践&quot;">​</a></h3><p>tools/generate.config.cjs：资源上传到bucket路径</p><p>vite.config.js：vite项目请求资源路径</p><p><img src="'+l+'" alt="image-20250512110211259"></p><p>原来的资源保存在bucket中的 <code>项目/年/月/日/下</code>，现在改成 <code>项目/年</code></p><p>vite打包资源，只有在文件内容改变的时候才会生成新的文件名，访问的时候才会请求新的资源</p><ul><li><p>每次请求资源 源站 =》 cdn节点 =》浏览器缓存</p></li><li><p>这样可以提高资源的命中率，减少资源请求的时间</p></li></ul><h3 id="_1-1知识点-查看资源是否命中源站或者cdn节点" tabindex="-1">1-1知识点：查看资源是否命中源站或者cdn节点 <a class="header-anchor" href="#_1-1知识点-查看资源是否命中源站或者cdn节点" aria-label="Permalink to &quot;1-1知识点：查看资源是否命中源站或者cdn节点&quot;">​</a></h3><p>公司资源上传到七牛云</p><p><img src="'+h+`" alt="image-20250512141435800"></p><p>x-qnm-cache的值</p><ul><li><strong><code>Hit</code></strong> 表示请求的资源已存在于CDN节点缓存中，直接由边缘节点响应，无需回源（如中的<code>X-Qnm-Cache: Hit</code>）。</li><li><strong><code>Miss</code></strong> 表示CDN节点未缓存该资源，需向源站拉取数据并可能更新缓存（如中的<code>X-Qnm-Cache: Miss</code>）。</li></ul><h3 id="_1-2-发现的问题-爱学网手机端ai-learn-mobile-student这个项目-打包后dist每一次的hash会变化-更新到七牛云每一次的资源都是变化的" tabindex="-1">1-2 发现的问题：爱学网手机端ai-learn-mobile-student这个项目，打包后dist每一次的hash会变化，更新到七牛云每一次的资源都是变化的 <a class="header-anchor" href="#_1-2-发现的问题-爱学网手机端ai-learn-mobile-student这个项目-打包后dist每一次的hash会变化-更新到七牛云每一次的资源都是变化的" aria-label="Permalink to &quot;1-2 发现的问题：爱学网手机端ai-learn-mobile-student这个项目，打包后dist每一次的hash会变化，更新到七牛云每一次的资源都是变化的&quot;">​</a></h3><h2 id="_2、项目优化" tabindex="-1">2、项目优化 <a class="header-anchor" href="#_2、项目优化" aria-label="Permalink to &quot;2、项目优化&quot;">​</a></h2><p>css、js、pretter</p><p>变成优化</p><p>各种lint</p><h2 id="_3、针对vue的性能优化" tabindex="-1">3、针对vue的性能优化 <a class="header-anchor" href="#_3、针对vue的性能优化" aria-label="Permalink to &quot;3、针对vue的性能优化&quot;">​</a></h2><h3 id="_1、数据上" tabindex="-1">1、数据上 <a class="header-anchor" href="#_1、数据上" aria-label="Permalink to &quot;1、数据上&quot;">​</a></h3><ol><li>对于组件数据结构的设计，结合开发场景，选择合适的数据结构，使用对象还是数组，减少底层的计算和内存消耗。</li><li>结合conputed和watch这两个，避免在模版中使用复杂的逻辑计算</li></ol><h3 id="_2、组件上" tabindex="-1">2、组件上 <a class="header-anchor" href="#_2、组件上" aria-label="Permalink to &quot;2、组件上&quot;">​</a></h3><ol><li><p>设计通用型、可扩展组件，提高组件的复用率，以减少组件的数量和引用打包成本。</p></li><li><p>对于一些频繁切换的组件，使用keep-alive缓存，让组件不会被销毁</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ Component }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;transition&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;keep-alive&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;component :is=&quot;Component&quot; /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/keep-alive&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/transition&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>涉及到的生命周期是：<code>activated</code>和<code>deactivated</code></p><p>在切换组件时，当前组件时deactivated，组件的整个对象都会被缓存起来；在切换回来的时候，触发activated，缓存的东西又被拿回来使用。如果使用v-if的话，整个组件就会被不断的卸载和创建。</p></li></ol><h3 id="_3、组件懒加载" tabindex="-1">3、组件懒加载 <a class="header-anchor" href="#_3、组件懒加载" aria-label="Permalink to &quot;3、组件懒加载&quot;">​</a></h3><p>组件在首次使用的时候才会被引入加载，不会被打包进index.js，以减少首次打开网站的资源加载时间</p><h3 id="_4、虚拟dom优化" tabindex="-1">4、虚拟dom优化 <a class="header-anchor" href="#_4、虚拟dom优化" aria-label="Permalink to &quot;4、虚拟dom优化&quot;">​</a></h3><p>使用key值，在更新数据的时候不会更新整个dom树，而是diff算法根据这个key去计算出更新的节点去更新，减少回流成本</p><h3 id="_5、资源优化" tabindex="-1">5、资源优化 <a class="header-anchor" href="#_5、资源优化" aria-label="Permalink to &quot;5、资源优化&quot;">​</a></h3><p>使用**<code>vite-plugin-imagemin</code>**插件压缩图片，根据配置在一定程度上会使图片失真</p><p>图片懒加载：使用v-lazy指令，<code>vue-lazyload</code></p><h2 id="_4、一般的性能优化手段" tabindex="-1">4、一般的性能优化手段 <a class="header-anchor" href="#_4、一般的性能优化手段" aria-label="Permalink to &quot;4、一般的性能优化手段&quot;">​</a></h2><h3 id="_1、资源加载性能优化" tabindex="-1">1、资源加载性能优化 <a class="header-anchor" href="#_1、资源加载性能优化" aria-label="Permalink to &quot;1、资源加载性能优化&quot;">​</a></h3><h4 id="_1-1、vite集成tree-shaking" tabindex="-1">1-1、vite集成tree shaking <a class="header-anchor" href="#_1-1、vite集成tree-shaking" aria-label="Permalink to &quot;1-1、vite集成tree shaking&quot;">​</a></h4><p>开发是不用使用rollup打包的，因为浏览器已经可以识别esm模块</p><p>Vite 直接调用 Rollup 进行打包，可以通过esm的import和export模块，移除未被使用的代码</p><h4 id="_1-2、图片优化" tabindex="-1">1-2、图片优化 <a class="header-anchor" href="#_1-2、图片优化" aria-label="Permalink to &quot;1-2、图片优化&quot;">​</a></h4><ul><li><p>图片懒加载：延迟加载非视口内的图片，只有用户滚动到附近的时候才会开始加载</p><p>​ 原生</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;real-image.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;placeholder.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lazy&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;懒加载图片&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>​ js实现</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;real-image.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;placeholder.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lazy&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;懒加载图片&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOMContentLoaded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lazyImages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;img.lazy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntersectionObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entry.isIntersecting) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> img</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.target;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        img.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.dataset.src; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 替换为真实图片</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        img.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lazy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unobserve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 停止监听已加载的图片</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lazyImages.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li><li><p>使用插件压缩图片，在构建的时候去压缩图片</p></li></ul><h3 id="_2、减少http请求" tabindex="-1">2、减少http请求 <a class="header-anchor" href="#_2、减少http请求" aria-label="Permalink to &quot;2、减少http请求&quot;">​</a></h3><h4 id="_2-1-小图标使用雪碧图-通过定位方式截取图片" tabindex="-1">2-1 小图标使用雪碧图，通过定位方式截取图片 <a class="header-anchor" href="#_2-1-小图标使用雪碧图-通过定位方式截取图片" aria-label="Permalink to &quot;2-1 小图标使用雪碧图，通过定位方式截取图片&quot;">​</a></h4><h4 id="_2-2-内联的一些资源-css-js-写到html中-》-index-html" tabindex="-1">2-2 内联的一些资源（css/js）写到html中 =》 index.html <a class="header-anchor" href="#_2-2-内联的一些资源-css-js-写到html中-》-index-html" aria-label="Permalink to &quot;2-2 内联的一些资源（css/js）写到html中 =》 index.html&quot;">​</a></h4><h4 id="_2-3-使用http2-支持多路复用-减少连接开销" tabindex="-1">2-3 使用http2:支持多路复用，减少连接开销 <a class="header-anchor" href="#_2-3-使用http2-支持多路复用-减少连接开销" aria-label="Permalink to &quot;2-3 使用http2:支持多路复用，减少连接开销&quot;">​</a></h4><p><img src="`+n+'" alt="image-20250519142027300"></p><h3 id="_3、缓存优化" tabindex="-1">3、缓存优化 <a class="header-anchor" href="#_3、缓存优化" aria-label="Permalink to &quot;3、缓存优化&quot;">​</a></h3><ul><li>强缓存：<code>max-age=31536000</code>（1 年）静态资源。</li><li>cdn加速</li></ul><h3 id="_4、渲染性能优化" tabindex="-1">4、渲染性能优化 <a class="header-anchor" href="#_4、渲染性能优化" aria-label="Permalink to &quot;4、渲染性能优化&quot;">​</a></h3><ul><li><p>减少重绘/重排</p></li><li><p>长列表进行虚拟化滚动</p><p>第三方库的使用：vue-virtual-scroller</p></li><li><p>减少主进程负担</p><p>复杂计算使用web worker</p></li></ul><p>​</p>',47)]))}const u=i(p,[["render",k]]);export{y as __pageData,u as default};
