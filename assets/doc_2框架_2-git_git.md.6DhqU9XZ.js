import{_ as a,c as i,o as e,ae as s}from"./chunks/framework.DD4G2i-B.js";const o="/doc/assets/image-20250422093404456.t-Gbq2Kp.png",r="/doc/assets/image-20250422105622926.DfL2uUhw.png",g="/doc/assets/image-20250422105753229.CDtFavz0.png",h="/doc/assets/image-20250422142056362.BrmJU2dG.png",n="/doc/assets/image-20250422162707212.BW1qez7H.png",p="/doc/assets/image-20250422112723339.DuWfGj0L.png",l="/doc/assets/image-20250422172448560.-SJifQrs.png",c="/doc/assets/image-20250422174809575.DD_Gp-sE.png",d="/doc/assets/image-20250422142753060.DDp3Se3K.png",m="/doc/assets/image-20250422144145072.BcKnN2jY.png",u="/doc/assets/image-20250422144233514.CJrl4ms7.png",b="/doc/assets/image-20250422144452521.Cgvcnx6g.png",k="/doc/assets/image-20250422162208336.CxyX8wFy.png",_="/doc/assets/image-20250422223238251.ChZpIYE0.png",f="/doc/assets/image-20250422223448879.FKZFL4dG.png",q="/doc/assets/image-20250422223813592.BqUbRsiW.png",x="/doc/assets/image-20250422225536075.TxQnHFJn.png",F="/doc/assets/image-20250423093413414.BQ5EeLLV.png",P="/doc/assets/image-20250423093553742.urd2hwDV.png",v="/doc/assets/image-20250423143501658.BDFokuZ3.png",C="/doc/assets/image-20250423143914942.pkcLJBsd.png",B="/doc/assets/image-20250423144325617.B_EP9wyH.png",y="/doc/assets/image-20250423141940832.BcfqtgWc.png",E="/doc/assets/image-20250423160752115.WMS0uO39.png",w="/doc/assets/image-20250424110021560.CzhDgawf.png",D="/doc/assets/image-20250424154853432.D4Q1gFw1.png",A="/doc/assets/image-20250424170117005.xOIIGq12.png",S="/doc/assets/image-20250425094130242.DfnWilsE.png",H="/doc/assets/image-20250425094730920.C3TRW6fM.png",G="/doc/assets/image-20250426104643886.CVoO-gd5.png",T="/doc/assets/image-20250426110529880.B8wApjJM.png",z="/doc/assets/image-20250426145528128.DN15FuUf.png",L="/doc/assets/image-20250426145623753.CfhqwsD6.png",I="/doc/assets/image-20250426145645447.iN7h126n.png",J="/doc/assets/image-20250426145704203.B3Q6mG6_.png",N="/doc/assets/image-20250426155403055.Dc-RY7kv.png",$=JSON.parse('{"title":"git","description":"","frontmatter":{},"headers":[],"relativePath":"doc/2框架/2-git/git.md","filePath":"doc/2框架/2-git/git.md"}'),U={name:"doc/2框架/2-git/git.md"};function W(R,t,V,Q,K,M){return e(),i("div",null,t[0]||(t[0]=[s('<h1 id="git" tabindex="-1">git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;git&quot;">​</a></h1><p>官方文档：<a href="https://git-scm.com/doc" target="_blank" rel="noreferrer">https://git-scm.com/doc</a></p><h2 id="一、工作流程" tabindex="-1">一、工作流程 <a class="header-anchor" href="#一、工作流程" aria-label="Permalink to &quot;一、工作流程&quot;">​</a></h2><p><img src="'+o+`" alt="image-20250422093404456"></p><p>Untracked: git不知道的文件</p><h2 id="二、使用步骤" tabindex="-1">二、使用步骤 <a class="header-anchor" href="#二、使用步骤" aria-label="Permalink to &quot;二、使用步骤&quot;">​</a></h2><h3 id="_1、用户信息" tabindex="-1">1、用户信息 <a class="header-anchor" href="#_1、用户信息" aria-label="Permalink to &quot;1、用户信息&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">设置本地邮箱用户名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;***&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;***&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">查看git配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span></span></code></pre></div><p><img src="`+r+'" alt="image-20250422105622926"></p><p>​ 本地配置的这个只是在push代码会带上的用户数据，标记是什么人提交的而已</p><p><img src="'+g+'" alt="image-20250422105753229"></p><h3 id="_2、链接远程仓库的两种··协议··" tabindex="-1">2、链接远程仓库的两种··协议·· <a class="header-anchor" href="#_2、链接远程仓库的两种··协议··" aria-label="Permalink to &quot;2、链接远程仓库的两种··协议··&quot;">​</a></h3><p>简单介绍可以看下CICD.md</p><h4 id="_2-1如何配置" tabindex="-1">2.1如何配置 <a class="header-anchor" href="#_2-1如何配置" aria-label="Permalink to &quot;2.1如何配置&quot;">​</a></h4><ul><li><p>https</p><p>用户名+person_access_token</p><p><img src="'+h+'" alt="image-20250422142056362"></p><p>第一次去推送代码需要设置用户名+token</p><p>通过钥匙串访问app可以查到本地存储</p><p><img src="'+n+'" alt="image-20250422162707212"></p></li><li><p>ssh协议</p><p>配置方法可以查看CICD.md文件</p></li></ul><h4 id="_2-2一个实操-之前公司用的ssh-后来使用https去认证" tabindex="-1">2.2一个实操：之前公司用的ssh，后来使用https去认证 <a class="header-anchor" href="#_2-2一个实操-之前公司用的ssh-后来使用https去认证" aria-label="Permalink to &quot;2.2一个实操：之前公司用的ssh，后来使用https去认证&quot;">​</a></h4><p>网络安全相关</p><p><img src="'+p+'" alt="image-20250422112723339"></p><p><img src="'+l+'" alt="image-20250422172448560"></p><p>自己的轻量级服务器，通过22端口去连接服务器</p><p>配置80端口，设置nginx去访问文件</p><p><img src="'+c+'" alt="image-20250422174809575"></p><h4 id="_2-3-实操关联的git的操作" tabindex="-1">2.3 实操关联的git的操作 <a class="header-anchor" href="#_2-3-实操关联的git的操作" aria-label="Permalink to &quot;2.3 实操关联的git的操作&quot;">​</a></h4><p>切换链接源</p><p><img src="'+d+`" alt="image-20250422142753060"></p><p>这两个分别是两种连接的地址，如果需要切换连接方式，就是设置远程仓库地址</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看远程连接</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> **</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 设置远程地址</span></span></code></pre></div><p><img src="`+m+'" alt="image-20250422144145072"></p><p>当前公司只支持https形式，我切换到ssh源，去push，报这个错，ssh默认是22端口号</p><p><img src="'+u+'" alt="image-20250422144233514"></p><p>切换回https源，成功</p><p><img src="'+b+'" alt="image-20250422144452521"></p><p><img src="'+k+'" alt="image-20250422162208336"></p><h4 id="_2-4-ssh常见错误" tabindex="-1">2.4 ssh常见错误 <a class="header-anchor" href="#_2-4-ssh常见错误" aria-label="Permalink to &quot;2.4    ssh常见错误&quot;">​</a></h4><ul><li>connection timed out 网络/防火墙问题</li><li>connection refused ssh服务为运行或端口错误</li><li>permission denied 认证错误</li></ul><h3 id="_3、使用场景" tabindex="-1">3、使用场景 <a class="header-anchor" href="#_3、使用场景" aria-label="Permalink to &quot;3、使用场景&quot;">​</a></h3><h4 id="_3-1-本地改了代码-add-》commit到本地仓库-公司的网总是延迟-发现远程有提交没有拉取。" tabindex="-1">3.1 本地改了代码，add -》commit到本地仓库，公司的网总是延迟，发现远程有提交没有拉取。 <a class="header-anchor" href="#_3-1-本地改了代码-add-》commit到本地仓库-公司的网总是延迟-发现远程有提交没有拉取。" aria-label="Permalink to &quot;3.1 本地改了代码，add -》commit到本地仓库，公司的网总是延迟，发现远程有提交没有拉取。&quot;">​</a></h4><h5 id="法一-撤销本地仓库代码到暂存区-拉代码-解决冲突-再提交" tabindex="-1">法一：撤销本地仓库代码到暂存区，拉代码，解决冲突，再提交 <a class="header-anchor" href="#法一-撤销本地仓库代码到暂存区-拉代码-解决冲突-再提交" aria-label="Permalink to &quot;法一：撤销本地仓库代码到暂存区，拉代码，解决冲突，再提交&quot;">​</a></h5><ul><li><p>git log：查看本地仓库的历史记录<img src="'+_+'" alt="image-20250422223238251"></p></li><li><p>git show [commit-hash]</p><p><img src="'+f+'" alt="image-20250422223448879"></p></li><li><p>git reset HEAD~1 撤销本地仓库的提交且取消暂存</p><p><img src="'+q+'" alt="image-20250422223813592"></p><p>HEAD～1：最近的一次提交</p><p>git reset</p><p>​ --soft：撤销的提交保存到暂存区</p><p>​ --mixed：<strong>默认</strong>，撤销的提交直接到工作区</p><p>​ --hard：撤销的提交全部丢弃，暂存区和工作区均不保留</p></li><li><p>git pull 拉取最新代码解决冲突再提交</p></li></ul><h5 id="法二-强推-没有什么暴力解决不了的-但是得保证改的代码不会跟别人冲突-否则流水线失败" tabindex="-1">法二：强推，没有什么暴力解决不了的，但是得保证改的代码不会跟别人冲突，否则流水线失败； <a class="header-anchor" href="#法二-强推-没有什么暴力解决不了的-但是得保证改的代码不会跟别人冲突-否则流水线失败" aria-label="Permalink to &quot;法二：强推，没有什么暴力解决不了的，但是得保证改的代码不会跟别人冲突，否则流水线失败；&quot;">​</a></h5><p>还需要看下这个分支是不是受保护的，如果gitlab中设置限制不能强推覆盖也会失败。</p><p>git push origin 分支名 --force</p><p><img src="'+x+'" alt="image-20250422225536075"></p><h5 id="法三-撤销这个提交" tabindex="-1">法三：撤销这个提交 <a class="header-anchor" href="#法三-撤销这个提交" aria-label="Permalink to &quot;法三：撤销这个提交&quot;">​</a></h5><p>git revert [commit-id]</p><p>撤销某个提交，并生成新的提交</p><p><img src="'+F+'" alt="image-20250423093413414"></p><p><img src="'+P+'" alt="image-20250423093553742"></p><h3 id="_4、文档学习-2、git基础" tabindex="-1">4、文档学习：2、git基础 <a class="header-anchor" href="#_4、文档学习-2、git基础" aria-label="Permalink to &quot;4、文档学习：2、git基础&quot;">​</a></h3><h4 id="_4-1-git文件" tabindex="-1">4.1 .git文件 <a class="header-anchor" href="#_4-1-git文件" aria-label="Permalink to &quot;4.1 .git文件&quot;">​</a></h4><p>是git版本控制系统的核心，存储了项目的所有版本信息和元数据</p><p>以爱学网项目为例</p><p><img src="'+v+'" alt="image-20250423143501658"></p><h5 id="_1、refs" tabindex="-1">1、refs <a class="header-anchor" href="#_1、refs" aria-label="Permalink to &quot;1、refs&quot;">​</a></h5><p><img src="'+C+'" alt="image-20250423143914942"></p><h5 id="_2、config" tabindex="-1">2、config <a class="header-anchor" href="#_2、config" aria-label="Permalink to &quot;2、config&quot;">​</a></h5><p><img src="'+B+'" alt="image-20250423144325617"></p><p>存储仓库级配置信息，如用户信息、远程仓库 URL、别名等，优先级高于全局配置</p><h5 id="_3、-hook-钩子" tabindex="-1">3、 Hook：钩子 <a class="header-anchor" href="#_3、-hook-钩子" aria-label="Permalink to &quot;3、 Hook：钩子&quot;">​</a></h5><p>在特定的git操作发生时<strong>自动触发自定义脚本</strong>，从而实现自动化任务或流程控制，在.git/hooks目录下</p><img src="'+y+'" alt="image-20250423141940832" style="zoom:50%;"><p>pre-commit：提交前触发，常用于格式检查（eslint）或运行测试</p><p>pre-push：推送前触发，可验证代码兼容性或集成测试</p><p>pre-receive：服务器接受推送前触发</p><h5 id="_4、index" tabindex="-1">4、index <a class="header-anchor" href="#_4、index" aria-label="Permalink to &quot;4、index&quot;">​</a></h5><p>记录暂存区的东西</p><h4 id="_4-2-gitnore-忽略文件" tabindex="-1">4.2 .gitnore 忽略文件 <a class="header-anchor" href="#_4-2-gitnore-忽略文件" aria-label="Permalink to &quot;4.2 .gitnore 忽略文件&quot;">​</a></h4><h4 id="_4-3-命令" tabindex="-1">4.3 命令 <a class="header-anchor" href="#_4-3-命令" aria-label="Permalink to &quot;4.3 命令&quot;">​</a></h4><p>1-查看文件状态</p><h5 id="git-status" tabindex="-1">git status <a class="header-anchor" href="#git-status" aria-label="Permalink to &quot;git status&quot;">​</a></h5><p>// 文件modified、unmodified、需要push、up to date</p><p>2-查看工作区和暂存区的区别</p><h5 id="git-diff" tabindex="-1">git diff <a class="header-anchor" href="#git-diff" aria-label="Permalink to &quot;git diff&quot;">​</a></h5><p><img src="'+E+'" alt="image-20250423160752115"></p><p>3-查看暂存区于本地仓库的区别</p><h5 id="git-diff-staged" tabindex="-1">git diff staged <a class="header-anchor" href="#git-diff-staged" aria-label="Permalink to &quot;git diff staged&quot;">​</a></h5><p>4-工作区代码 -&gt; 本地仓库：跳过暂存区</p><h5 id="git-commit-a-m" tabindex="-1">git commit -a -m &#39;&#39; <a class="header-anchor" href="#git-commit-a-m" aria-label="Permalink to &quot;git commit -a -m &#39;&#39;&quot;">​</a></h5><p>5-查看最近两条提交记录</p><h5 id="git-log-2" tabindex="-1">git log -2 <a class="header-anchor" href="#git-log-2" aria-label="Permalink to &quot;git log -2&quot;">​</a></h5><p>6-把暂存区的东西提交到已有的本地仓库记录去</p><p>git commit -m &#39;add&#39; // 本地仓库以后已有</p><p>git add . // 工作区还有未提交的</p><h5 id="git-commit-amend-暂存区的东西再加入本地仓库中" tabindex="-1">git commit --amend // 暂存区的东西再加入本地仓库中 <a class="header-anchor" href="#git-commit-amend-暂存区的东西再加入本地仓库中" aria-label="Permalink to &quot;git commit --amend   // 暂存区的东西再加入本地仓库中&quot;">​</a></h5><h4 id="_4-4-远程仓库" tabindex="-1">4.4 远程仓库 <a class="header-anchor" href="#_4-4-远程仓库" aria-label="Permalink to &quot;4.4 远程仓库&quot;">​</a></h4><p><img src="'+w+'" alt="image-20250424110021560"></p><h5 id="git-remote" tabindex="-1">git remote <a class="header-anchor" href="#git-remote" aria-label="Permalink to &quot;git remote&quot;">​</a></h5><p>查看已经配置的远程仓库服务器，origin是git给克隆的仓库服务器的名字</p><p>git remote -v</p><h5 id="git-add-remote-gitee-soup-https-gitee-com-readboy-soup-ai-learn-moblie-student-git" tabindex="-1">git add remote gitee-soup <a href="https://gitee.com/readboy_soup/ai-learn-moblie-student.git" target="_blank" rel="noreferrer">https://gitee.com/readboy_soup/ai-learn-moblie-student.git</a> <a class="header-anchor" href="#git-add-remote-gitee-soup-https-gitee-com-readboy-soup-ai-learn-moblie-student-git" aria-label="Permalink to &quot;git add remote gitee-soup https://gitee.com/readboy_soup/ai-learn-moblie-student.git&quot;">​</a></h5><p>添加远程地址，取名为gitee-soup，一般不取名字的话就会默认是origin<img src="'+D+'" alt="image-20250424154853432"></p><p>可以指定push的远程仓库</p><p>git push gitee-soup</p><h5 id="git-fetch-gitee-soup" tabindex="-1">git fetch gitee-soup <a class="header-anchor" href="#git-fetch-gitee-soup" aria-label="Permalink to &quot;git fetch gitee-soup&quot;">​</a></h5><p>拉取指定仓库的信息：分支、log、tag...</p><h5 id="git-push-origin" tabindex="-1">git push origin <a class="header-anchor" href="#git-push-origin" aria-label="Permalink to &quot;git push origin&quot;">​</a></h5><p>推送到指定远程仓库</p><h5 id="git-remote-show-origin" tabindex="-1">git remote show origin <a class="header-anchor" href="#git-remote-show-origin" aria-label="Permalink to &quot;git remote show origin&quot;">​</a></h5><p>查看某个远程仓库</p><p><img src="'+A+'" alt="image-20250424170117005"></p><h5 id="git-remote-remove-give-soup" tabindex="-1">git remote remove give-soup <a class="header-anchor" href="#git-remote-remove-give-soup" aria-label="Permalink to &quot;git remote remove give-soup&quot;">​</a></h5><p>移除远程仓库</p><h4 id="_4-5-打标签" tabindex="-1">4.5 打标签 <a class="header-anchor" href="#_4-5-打标签" aria-label="Permalink to &quot;4.5 打标签&quot;">​</a></h4><h5 id="git-tag" tabindex="-1">git tag <a class="header-anchor" href="#git-tag" aria-label="Permalink to &quot;git tag&quot;">​</a></h5><p>查看标签列表</p><h5 id="git-tag-a-v1-0-m-备注" tabindex="-1">git tag -a v1.0 -m &#39;备注&#39; <a class="header-anchor" href="#git-tag-a-v1-0-m-备注" aria-label="Permalink to &quot;git tag -a v1.0 -m &#39;备注&#39;&quot;">​</a></h5><p>打1.0 tag且添加备注</p><h5 id="git-tag-show-v1-0" tabindex="-1">git tag show v1.0 <a class="header-anchor" href="#git-tag-show-v1-0" aria-label="Permalink to &quot;git tag show v1.0&quot;">​</a></h5><p>展示1.0tag的新增内容</p><h5 id="git-tag-v1-1-light" tabindex="-1">git tag v1.1-light <a class="header-anchor" href="#git-tag-v1-1-light" aria-label="Permalink to &quot;git tag v1.1-light&quot;">​</a></h5><p>打轻量级标签，不需要备注</p><h5 id="git-push-orgin-v1-0" tabindex="-1">git push orgin v1.0 <a class="header-anchor" href="#git-push-orgin-v1-0" aria-label="Permalink to &quot;git push orgin v1.0&quot;">​</a></h5><p>推送标签</p><h5 id="git-push-origin-tags" tabindex="-1">git push origin --tags <a class="header-anchor" href="#git-push-origin-tags" aria-label="Permalink to &quot;git push origin --tags&quot;">​</a></h5><p>推送所有标签</p><h5 id="git-tag-d-v1-0" tabindex="-1">git tag -d v1.0 <a class="header-anchor" href="#git-tag-d-v1-0" aria-label="Permalink to &quot;git tag -d v1.0&quot;">​</a></h5><p>删除标签</p><h5 id="git-push-origin-delete-v1-0" tabindex="-1">git push origin -- delete v1.0 <a class="header-anchor" href="#git-push-origin-delete-v1-0" aria-label="Permalink to &quot;git push origin -- delete v1.0&quot;">​</a></h5><p>删除远程标签</p><h4 id="_4-6-分支" tabindex="-1">4.6 分支 <a class="header-anchor" href="#_4-6-分支" aria-label="Permalink to &quot;4.6 分支&quot;">​</a></h4><h5 id="git-branch-test" tabindex="-1">git branch test <a class="header-anchor" href="#git-branch-test" aria-label="Permalink to &quot;git branch test&quot;">​</a></h5><p>创建新分支，HEAD指向当前所在的分支</p><p><img src="'+S+'" alt="image-20250425094130242"></p><h5 id="git-log-oneline-3" tabindex="-1">git log --oneline -3 <a class="header-anchor" href="#git-log-oneline-3" aria-label="Permalink to &quot;git log --oneline -3&quot;">​</a></h5><p>查看HEAD指向</p><p><img src="'+H+'" alt="image-20250425094730920"></p><h5 id="git-switch-test-git-checkout-test" tabindex="-1">git switch test === git checkout test <a class="header-anchor" href="#git-switch-test-git-checkout-test" aria-label="Permalink to &quot;git switch test  === git checkout test&quot;">​</a></h5><p>切换分支</p><h5 id="git-switch-c-test-git-checkout-b-test" tabindex="-1">git switch -c test === git checkout -b test <a class="header-anchor" href="#git-switch-c-test-git-checkout-b-test" aria-label="Permalink to &quot;git switch -c test === git checkout -b test&quot;">​</a></h5><p>创建并且切换分支，这里的-b是branch的意思</p><h5 id="git-merge-test" tabindex="-1">git merge test <a class="header-anchor" href="#git-merge-test" aria-label="Permalink to &quot;git merge test&quot;">​</a></h5><p>合并分支</p><p>git merge feat/aa origin/test</p><p>合并远程oirgin的test到本地feat/aa分支</p><h5 id="git-branch-d-test" tabindex="-1">git branch -d test <a class="header-anchor" href="#git-branch-d-test" aria-label="Permalink to &quot;git branch -d test&quot;">​</a></h5><p>删除分支</p><h5 id="git-fetch-origin" tabindex="-1">git fetch origin <a class="header-anchor" href="#git-fetch-origin" aria-label="Permalink to &quot;git fetch origin&quot;">​</a></h5><p>从origin仓库中更新</p><p>git fetch --all</p><p>拉取所有远程信息</p><h5 id="git-push-origin-bug-originbug" tabindex="-1">git push origin bug:originbug <a class="header-anchor" href="#git-push-origin-bug-originbug" aria-label="Permalink to &quot;git push origin bug:originbug&quot;">​</a></h5><p>将本地的bug分支推送到远程origin的originbug分支</p><h5 id="git-checkout-b-test-origin-test" tabindex="-1">git checkout -b test origin/test <a class="header-anchor" href="#git-checkout-b-test-origin-test" aria-label="Permalink to &quot;git checkout -b test origin/test&quot;">​</a></h5><p>从远程origin的test切出本地test，新建且切换HEAD到test上</p><p>本地的test就是远程origin/test的<strong>跟踪分支</strong>。tracking branch</p><p>origin/test就是上游分支 upstream branch</p><h5 id="git-remote-vv" tabindex="-1">git remote -vv <a class="header-anchor" href="#git-remote-vv" aria-label="Permalink to &quot;git remote -vv&quot;">​</a></h5><p>查看分支对应关系</p><p><img src="'+G+'" alt="image-20250426104643886"></p><h5 id="git-pull-git-fetch-git-merge" tabindex="-1">git pull === git fetch + git merge <a class="header-anchor" href="#git-pull-git-fetch-git-merge" aria-label="Permalink to &quot;git pull === git fetch + git merge&quot;">​</a></h5><p>git fetch 将远程更新到本地仓库</p><p>git merge 合并的是本地仓库</p><p><img src="'+T+'" alt="image-20250426110529880"></p><h5 id="git-push-origin-delete-test" tabindex="-1">git push origin --delete test <a class="header-anchor" href="#git-push-origin-delete-test" aria-label="Permalink to &quot;git push origin --delete test&quot;">​</a></h5><p>删除远程origin的test分支，推送远程删除这个分支</p><h5 id="git-checkout-master-git-rebase-test" tabindex="-1">git checkout master =&gt; git rebase test <a class="header-anchor" href="#git-checkout-master-git-rebase-test" aria-label="Permalink to &quot;git checkout master  =&gt; git rebase test&quot;">​</a></h5><p>变基，将test的差别提交都移至到master上，变成test的新的提交</p><p>跟merge的区别是，你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的， 但它们看上去就像是串行的一样，提交历史是一条直线没有分叉</p><p><img src="'+z+'" alt="image-20250426145528128"></p><p>场景：</p><img src="'+L+'" alt="image-20250426145623753" style="zoom:50%;"><ul><li><p>merge</p><img src="'+I+'" alt="image-20250426145645447" style="zoom:50%;"></li><li><p>rebase</p><img src="'+J+'" alt="image-20250426145704203" style="zoom:50%;"></li></ul><p><strong>了解就好了，还是用merge吧，除非什么小修改就用rebase</strong></p><h4 id="_4-7-协议" tabindex="-1">4.7 协议 <a class="header-anchor" href="#_4-7-协议" aria-label="Permalink to &quot;4.7 协议&quot;">​</a></h4><h5 id="本地协议" tabindex="-1">本地协议 <a class="header-anchor" href="#本地协议" aria-label="Permalink to &quot;本地协议&quot;">​</a></h5><p>（这就跟计算机网络基础相关的知识连接在一起了，hhh，知识点连接起来了）</p><p>远程文件系统中有git仓库，只要用户授予权限就可以像gitlab一样去操作仓库数据了</p><p><img src="'+N+'" alt="image-20250426155403055"></p><p>git clone /nfs/repo.git # NFS 路径 git clone <a href="//192.168.1.100/repo.git" target="_blank" rel="noreferrer">//192.168.1.100/repo.git</a> # SMB 路径</p><h5 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h5><p>使用用户名+权限token登录</p><p>mac会把这个保存在keychain；win会保存在凭证管理器</p><h5 id="ssh" tabindex="-1">SSH <a class="header-anchor" href="#ssh" aria-label="Permalink to &quot;SSH&quot;">​</a></h5><p>远程仓库使用公钥</p><h5 id="git-1" tabindex="-1">Git <a class="header-anchor" href="#git-1" aria-label="Permalink to &quot;Git&quot;">​</a></h5><p>跟ssh协议类似，但是没有安全措施。要么谁都可以克隆这个版本库，要么谁也不能。 这意味着，通常不能通过 Git 协议推送。 由于没有授权机制，一旦你开放推送操作，意味着网络上知道这个项目 URL 的人都可以向项目推送数据。 不用说，极少会有人这么做。</p><p>一般的做法里，会同时提供 SSH 或者 HTTPS 协议的访问服务，只让少数几个开发者有推送（写）权限，其他人通过 <code>git://</code> 访问只有读权限。</p><p>看到这<a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BA-Git" target="_blank" rel="noreferrer">https://git-scm.com/book/zh/v2/服务器上的-Git-在服务器上搭建-Git</a></p><h2 id="小知识点" tabindex="-1">小知识点 <a class="header-anchor" href="#小知识点" aria-label="Permalink to &quot;小知识点&quot;">​</a></h2><ul><li><p>Homebrew：mac的开源软件包管理器</p></li><li></li></ul>',180)]))}const j=a(U,[["render",W]]);export{$ as __pageData,j as default};
