import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.DD4G2i-B.js";const n="/doc/assets/image-20250509220947258.Dh9ZpcgW.png",l="/doc/assets/image-20250510094224402.BH1jxvOf.png",p="/doc/assets/image-20250510114555379.Dn8ARylZ.png",h="/doc/assets/image-20250509171752447.CF4sONIr.png",m=JSON.parse('{"title":"一、vite","description":"","frontmatter":{},"headers":[],"relativePath":"doc/2框架/0-vite/文档学习.md","filePath":"doc/2框架/0-vite/文档学习.md"}'),k={name:"doc/2框架/0-vite/文档学习.md"};function r(d,s,o,c,g,E){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="一、vite" tabindex="-1">一、vite <a class="header-anchor" href="#一、vite" aria-label="Permalink to &quot;一、vite&quot;">​</a></h1><p>vite官方：<a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">https://cn.vitejs.dev/</a></p><p>vue官方：<a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">https://cn.vuejs.org/</a></p><ul><li><p>通过vue构建vue+vite项目</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue@latest</span></span></code></pre></div></li><li><p>通过vite构建vue+vite项目</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite@latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  my-vue-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue</span></span></code></pre></div></li></ul><h2 id="_1、概念" tabindex="-1">1、概念 <a class="header-anchor" href="#_1、概念" aria-label="Permalink to &quot;1、概念&quot;">​</a></h2><p>安装vite，编写index.html，编写script</p><p><img src="'+n+`" alt="image-20250509220947258"></p><p>将根目录的文件下的东西打包到dist</p><blockquote><p>vite作为一个开发服务器</p></blockquote><p>使用npm run previw预览产物</p><p>vite就是把各种框架的文件打包成html、css、js，浏览器能够识别的文件</p><h2 id="_2、功能" tabindex="-1">2、功能 <a class="header-anchor" href="#_2、功能" aria-label="Permalink to &quot;2、功能&quot;">​</a></h2><h3 id="_2-1、依赖解析与预构建" tabindex="-1">2.1、依赖解析与预构建 <a class="header-anchor" href="#_2-1、依赖解析与预构建" aria-label="Permalink to &quot;2.1、依赖解析与预构建&quot;">​</a></h3><p>vite支持ESM作为核心模块系统，但是npm包中仍使用commonjs，需要兼容这些npm包的语法</p><ul><li><p>依赖解析</p><p>解析引入文件的真正可用路径</p><p>当代码中出现 <code>import lodash from &#39;lodash&#39;</code> 时，Vite 会：</p><ol><li>检查 <code>node_modules</code> 找到 <code>lodash</code> 的真实路径。</li><li>确保它最终指向一个 <strong>浏览器可用的 ESM 文件</strong>。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 源码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lodash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lodash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Vite 转换后（开发环境）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lodash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/node_modules/.vite/lodash.js?v=123456&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 浏览器可以解析识别的</span></span></code></pre></div></li><li><p>预构建（pre-building）</p><ol><li>扫描 <code>package.json</code> 的 <code>dependencies</code>，找出所有依赖。</li><li>使用 esbuild将这些依赖： <ul><li>从 CJS/UMD 转换为 ESM 格式。</li><li>合并成一个或多个文件（减少 HTTP 请求）。</li></ul></li><li>缓存结果到 <code>node_modules/.vite</code> 目录。</li></ol><img src="`+l+`" alt="image-20250510094224402" style="zoom:50%;"></li></ul><p>​</p><h3 id="_2-2、hmr-hot-module-replacement-热模块替换" tabindex="-1">2.2、HMR：hot module replacement 热模块替换 <a class="header-anchor" href="#_2-2、hmr-hot-module-replacement-热模块替换" aria-label="Permalink to &quot;2.2、HMR：hot module replacement 热模块替换&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@vitejs/plugin-vue&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 深度集成 Vue 框架的 HMR 逻辑。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	]</span></span></code></pre></div><p>vite的热模块更新是基于<code>import.meta.hot</code>实现</p><blockquote><p><code>import.meta</code> 是 <strong>ECMAScript 模块（ESM）</strong> 的原生特性，由 JavaScript 运行时（如浏览器、Deno、Node.js 等）提供。</p></blockquote><h3 id="_2-3、ts" tabindex="-1">2.3、TS <a class="header-anchor" href="#_2-3、ts" aria-label="Permalink to &quot;2.3、TS&quot;">​</a></h3><p>Vite 仅执行 <code>.ts</code> 文件的转译工作，<strong>并不执行</strong> 任何类型检查。</p><h3 id="_2-4、html" tabindex="-1">2.4、html <a class="header-anchor" href="#_2-4、html" aria-label="Permalink to &quot;2.4、html&quot;">​</a></h3><p>index.html是入口文件，可以在根目录下建立另一个html文件，可轻松构建单页和<a href="https://cn.vitejs.dev/guide/build.html#multi-page-app" target="_blank" rel="noreferrer">多页应用程序</a>。</p><p>但是需要添加对这个html文件的配置</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rollupOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      input: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        main: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        about: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./about.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li>访问 <code>/about.html</code> 时会加载独立的资源，<strong>与 <code>index.html</code> 完全隔离</strong>。</li></ul><p>例子：</p><img src="`+p+`" alt="image-20250510114555379" style="zoom:50%;"><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __dirname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fileURLToPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rollupOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      input: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        main: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        nested: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nested/index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_2-5、框架支持" tabindex="-1">2.5、框架支持 <a class="header-anchor" href="#_2-5、框架支持" aria-label="Permalink to &quot;2.5、框架支持&quot;">​</a></h3><p>官方vite维护vue、react</p><h2 id="_3、使用插件" tabindex="-1">3、使用插件 <a class="header-anchor" href="#_3、使用插件" aria-label="Permalink to &quot;3、使用插件&quot;">​</a></h2><p>文档里面提到一个例子，使用<code>@vitejs/plugin-legacy</code>，有些es6语法等不被旧的浏览器支持</p><blockquote><p><strong>@vitejs/plugin-legacy</strong> 是 Vite 官方提供的一个插件，用于为现代浏览器构建的代码<strong>自动生成兼容旧浏览器的备用版本</strong>，确保应用在传统浏览器（如 IE 11、旧版 Chrome/Safari）中也能正常运行。</p></blockquote><h2 id="_4、部署静态站点" tabindex="-1">4、部署静态站点 <a class="header-anchor" href="#_4、部署静态站点" aria-label="Permalink to &quot;4、部署静态站点&quot;">​</a></h2><ul><li><p>本地构建部署</p><p>build然后preview，是预览构建完的产物， 在本地启动一个静态 Web 服务器，指定端口映射到这个dist文件</p></li><li><p>部署到服务，开启nginx端口映射</p></li></ul><h2 id="_5、环境变量和模式" tabindex="-1">5、环境变量和模式 <a class="header-anchor" href="#_5、环境变量和模式" aria-label="Permalink to &quot;5、环境变量和模式&quot;">​</a></h2><h1 id="二、引申" tabindex="-1">二、引申： <a class="header-anchor" href="#二、引申" aria-label="Permalink to &quot;二、引申：&quot;">​</a></h1><h2 id="_1、vue打包工具的历史" tabindex="-1">1、vue打包工具的历史 <a class="header-anchor" href="#_1、vue打包工具的历史" aria-label="Permalink to &quot;1、vue打包工具的历史&quot;">​</a></h2><p><img src="`+h+'" alt="image-20250509171752447"></p><h2 id="_2、兼容" tabindex="-1">2、兼容 <a class="header-anchor" href="#_2、兼容" aria-label="Permalink to &quot;2、兼容&quot;">​</a></h2><ul><li><p>语法兼容：js、css、html的兼容</p><p>比如build.target配置构建目标，最低支持到es2015</p></li><li><p>传统浏览器的兼容</p><p>使用插件<a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noreferrer">@vitejs/plugin-legacy</a></p></li></ul>',43)]))}const y=i(k,[["render",r]]);export{m as __pageData,y as default};
