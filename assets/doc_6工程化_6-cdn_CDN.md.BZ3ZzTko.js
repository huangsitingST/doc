import{_ as a,c as s,o as e,ae as p}from"./chunks/framework.DD4G2i-B.js";const l="/doc/assets/image-20250218110325653.CQIwbxBm.png",t="/doc/assets/image-20250218145032034.xq2xFsSX.png",o="/doc/assets/image-20250221100836770.BzCuG12-.png",n="/doc/assets/image-20250221102803467.C7yNvYei.png",c="/doc/assets/image-20250218150453144.BMxDHBTv.png",d="/doc/assets/image-20250218173313110.SQu45oN1.png",r="/doc/assets/image-20250219111931797.D5nAPjI5.png",g="/doc/assets/image-20250219103818036.BwO_gYzX.png",m="/doc/assets/image-20250218162941013.DQx72V27.png",h="/doc/assets/image-20250219104000896.cdHr_JyS.png",u="/doc/assets/image-20250219110525220.ChxHenqJ.png",k="/doc/assets/image-20250219110709032.BzwQEtpt.png",_="/doc/assets/image-20250219110859663.Blder7if.png",b="/doc/assets/image-20250219112611446.Ar4P-Z7t.png",x="/doc/assets/image-20250220113752505.DHGJLz8P.png",C="/doc/assets/image-20250220164640151.BGqchUUg.png",q="/doc/assets/image-20250220170409954.D_5BSGD9.png",N="/doc/assets/image-20250221135649181.BKgGSre2.png",E="/doc/assets/image-20250220170543776.tiXRDZ5-.png",D="/doc/assets/image-20250220170710187.Xx0gxStR.png",y="/doc/assets/image-20250220170829180.CjqotPBs.png",A="/doc/assets/image-20250220171025923.7vAhNZVc.png",P="/doc/assets/image-20250220171901171.Dzgo8kq8.png",S="/doc/assets/image-20250225153007771.CmIQ9yr3.png",f="/doc/assets/image-20250225153213246._R7wlL5e.png",v="/doc/assets/image-20250225153231045.DdYngGBm.png",B="/doc/assets/image-20250225153247997.yytjF9vY.png",w="/doc/assets/image-20250225153454375.BE6WiwE2.png",M="/doc/assets/image-20250225153506264.Bq_xdN7d.png",F="/doc/assets/image-20250225154758056.BMMyhK8B.png",j="/doc/assets/image-20250219175424264.B_UCrr9s.png",I="/doc/assets/image-20250219175653866.BQRFI4dD.png",L="/doc/assets/image-20250219175927854.6OTVEy4c.png",z="/doc/assets/image-20250219180148221.CydDDwqf.png",G="/doc/assets/image-20250219180246816.CDhX0QLa.png",T="/doc/assets/image-20250219152839716.DiHbePQ2.png",Y=JSON.parse('{"title":"CDN","description":"","frontmatter":{},"headers":[],"relativePath":"doc/6工程化/6-cdn/CDN.md","filePath":"doc/6工程化/6-cdn/CDN.md"}'),H={name:"doc/6工程化/6-cdn/CDN.md"};function Q(V,i,R,X,J,O){return e(),s("div",null,i[0]||(i[0]=[p('<h1 id="cdn" tabindex="-1">CDN <a class="header-anchor" href="#cdn" aria-label="Permalink to &quot;CDN&quot;">​</a></h1><p>content delivery network</p><p>内容 分发 网络</p><h2 id="一、网络" tabindex="-1">一、网络 <a class="header-anchor" href="#一、网络" aria-label="Permalink to &quot;一、网络&quot;">​</a></h2><p><strong>网路是由若干节点和链接这些节点的链路构成。</strong></p><ul><li><p>网络组成</p><p><img src="'+l+'" alt="image-20250218110325653"></p></li><li><p>网络架构</p><ol><li><p>客户机/服务器（C/S）架构</p><p>比如港澳通行证自助签注机器，设备又老又慢，更新换代很麻烦，维护和升级成本高、难度大，但是信息安全控制能力强，这个就是客户机</p></li><li><p>浏览器/服务器（B/S）架构</p></li></ol><p>这两种本质上都是：通过 <u>请求-响应</u> 来获取资源</p></li><li><p>网络功能</p><ol><li>资源共享</li><li>数据传输和通信</li><li>提供网络服务：域名转换成ip、为网络中的设备分配ip等网络参数</li></ol></li><li><p>网络协议：规定数据在网络中如何传播的规则</p><ol><li><strong>TCP/ip</strong>：TCP 负责保证数据传输的可靠性，IP 负责实现数据的路由和寻址。</li><li><strong>http协议</strong>：超文本传输协议</li><li><strong>ftp协议</strong>：文件传输协议，服务器与客户机进行文本传输</li></ol></li></ul><h2 id="二、什么是cdn" tabindex="-1">二、什么是cdn <a class="header-anchor" href="#二、什么是cdn" aria-label="Permalink to &quot;二、什么是cdn&quot;">​</a></h2><p>是由商业机构搭建的网络基础设施，一套标准的cdn会有自己的dns系统，因为它需要解析到边缘节点。</p><p>cdn是由全球多个服务器节点组成的网络，这些节点会缓存你网站的静态资源。</p><p>当用户访问你的网站时，<strong>资源会从离用户最近的节点（而非你的原始服务器）加载</strong>，从而显著加快速度。</p><p><img src="'+t+`" alt="image-20250218145032034"></p><h2 id="三、cdn的工作原理" tabindex="-1">三、cdn的工作原理 <a class="header-anchor" href="#三、cdn的工作原理" aria-label="Permalink to &quot;三、cdn的工作原理&quot;">​</a></h2><p>静态资源的生命周期</p><p>部署到源服务器 》 》首次请求触发cdn缓存 》》后续请求命中cdn缓存 》》缓存过期后回源更新</p><p>整个跟节点网络的工作原理有关</p><ul><li><p>资源分发</p><p>前端开发者将静态资源上传到 CDN 提供商的服务器，CDN 会将这些资源复制到全球各地的节点服务器上。</p></li><li><p>用户请求</p></li><li><p>节点选择</p><p>cdn找到离用户最近的节点服务器</p></li><li><p>资源返回</p><p>节点将缓存的资源返回用户</p></li></ul><h2 id="四、cdn的作用" tabindex="-1">四、cdn的作用 <a class="header-anchor" href="#四、cdn的作用" aria-label="Permalink to &quot;四、cdn的作用&quot;">​</a></h2><ul><li>加速资源加载</li><li>降低服务器压力</li><li>全球覆盖</li></ul><h2 id="五、如何使用cdn" tabindex="-1">五、如何使用cdn <a class="header-anchor" href="#五、如何使用cdn" aria-label="Permalink to &quot;五、如何使用cdn&quot;">​</a></h2><ul><li><p>直接使用公共cdn的资源</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>托管自己的资源</p><p>将项目构建后的静态文件（如 <code>dist/</code> 目录）上传到 CDN，并在 HTML 中替换资源链接</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 本地路径 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/js/app.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CDN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 路径 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.yoursite.com/js/app.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>常见cdn服务商</p><ul><li>公共库 CDN：<strong>jsDelivr</strong>、<strong>UNPKG</strong>、<strong>Google Hosted Libraries</strong></li><li>商业 CDN：<strong>Cloudflare</strong>、<strong>Akamai</strong>、<strong>AWS CloudFront</strong></li><li>开源方案：<strong>Self-Hosted CDN</strong>（需自建节点）</li></ul></li></ul><h2 id="六、通过cdn获取缓存内容的过程" tabindex="-1">六、通过cdn获取缓存内容的过程 <a class="header-anchor" href="#六、通过cdn获取缓存内容的过程" aria-label="Permalink to &quot;六、通过cdn获取缓存内容的过程&quot;">​</a></h2><p>cdn将对源站的请求导向了距离用户较近的最优缓存节点，而非源站。（针对静态资源）</p><p><img src="`+o+'" alt="image-20250221100836770"></p><p>GSLB：Global Server Load Balance 全局负载均衡服务器</p><p>​ 主要功能是根据用户本地dns的ip地址<strong>判断用户位置</strong>，筛选出距离用户较近的本地负载均衡系统，并将该<strong>SLB的ip地址作为结果返回给本地dns</strong></p><p>SLB：Server Load Balance 对集群内物理主机的负载均衡</p><p>​ 判断缓存集群中是否有用户请求的资源数据，如果有缓存，将<strong>http请求重定向到最优的缓存节点</strong>上</p><p><img src="'+n+'" alt="image-20250221102803467"></p><p>举🌰：</p><p>用户向www.example.com请求http资源</p><ol><li>首先向本地dns迭代获取www.example.com的ip地址</li><li>如果没有，就向<strong>根域名服务器发</strong>送dns查询报文</li><li>根dns发现域名前缀是com，给出负责解析com的<strong>顶级dns</strong>的IP地址</li><li>本地dns想顶级dns发送dns查询报文</li><li>顶级dns发现前缀是example.com，在本地记录中找到负责该前缀的<strong>权威dns</strong>的IP地址回复</li><li>本地dns向权威dns发送dns查询报文</li><li>权威dns查找到NAME为www.example.comde CNAME 记录，value值是cdn.www.example.com，并找到NMAE为cdn.www.example.com的A记录，最终找到<strong>DGSLB的ip地址</strong></li><li>GSLB根据请求的ip地址判断用户的大致位置在北京，找到合适的<strong>SLB的ip地址</strong>写入DNS回应报文，最为dns查询结果返回</li><li>客户端根据IP地址向SLB发送请求</li><li>SLB根据筛选出最优的缓存节点后回应客户端请求（状态码为302，重定向节点为最优缓存节点的ip地址）</li><li>客户端接受到SLB的http回复后，重定向到该节点</li><li>缓存节点判断请求的资源是否存在、过期，返回或者到源站刷新数据再回复</li></ol><p>其实就是，如果本地dns没有这个域名的对应关系的话，会走这么四圈</p><ul><li>找到GSLB的ip地址</li><li>找到SLB的ip地址</li><li>找到缓存节点的ip地址</li><li>缓存节点没有缓存的话向源站 更新缓存返回</li></ul><h2 id="七、思考" tabindex="-1">七、思考 <a class="header-anchor" href="#七、思考" aria-label="Permalink to &quot;七、思考&quot;">​</a></h2><h3 id="_1、什么是局域网" tabindex="-1">1、什么是局域网？ <a class="header-anchor" href="#_1、什么是局域网" aria-label="Permalink to &quot;1、什么是局域网？&quot;">​</a></h3><p>一个网络结构，但涉及的范围不大：一座大楼、一个校园范围内的网络</p><p>这里可以再拓展到网络的分类。</p><ul><li>按范围分类 <ol><li>个人域网：便携式电器与网络通信设备之间短距离通信，如蓝牙耳机和手机链接就形成个人域网</li><li>局域网：一组计算机和其他硬件设备在物理地址上彼此相隔不远的范围，如一座大楼、一个校园</li><li>城域网：覆盖范围一般为一个城市或地区</li><li>广域网：物理地址范围更大，如：一个国家、地区</li></ol></li><li>按传输介质分类 <ol><li>有线：采用有线传输介质连接网络设备，如双绞线、同轴电缆和光纤等</li><li>无线：采用无线传输介质，包括无线电波、微波和红外线等，如wifi、蓝牙</li></ol></li></ul><h3 id="_2、网站的静态资源一开始就会在节点服务器还是在源服务器" tabindex="-1">2、网站的静态资源一开始就会在节点服务器还是在源服务器？ <a class="header-anchor" href="#_2、网站的静态资源一开始就会在节点服务器还是在源服务器" aria-label="Permalink to &quot;2、网站的静态资源一开始就会在节点服务器还是在源服务器？&quot;">​</a></h3><p>网站的静态资源最开始是存储在源服务器上的，cdn的节点服务器还没有这些资源。</p><p>用户首次请求后，cdn才会从源服务器缓存资源到节点服务器。</p><p>举个🌰</p><ol><li><strong>用户首次请求资源</strong><ul><li>假设用户 A 访问你的网站，请求 <code>https://cdn.example.com/js/app.js</code>。</li><li>CDN 发现该资源在节点服务器上没有缓存，于是回源（向源服务器）拉取资源。</li><li>资源从源服务器传输到 CDN 节点，并缓存下来，同时返回给用户 A。</li></ul></li><li><strong>后续用户请求同一资源</strong><ul><li>用户 B 访问同一页面时，CDN 会直接返回节点服务器上已缓存的 <code>app.js</code>，无需回源。</li><li>这显著减少了加载时间，尤其是对远距离用户。</li></ul></li></ol><h3 id="_3、引申第2问-这样会导致一个问题-用户首次访问总会向源服务器缓存-势必速度会降下来-如何提前缓存到cdn节点" tabindex="-1">3、引申第2问：这样会导致一个问题，用户首次访问总会向源服务器缓存，势必速度会降下来，如何提前缓存到cdn节点？ <a class="header-anchor" href="#_3、引申第2问-这样会导致一个问题-用户首次访问总会向源服务器缓存-势必速度会降下来-如何提前缓存到cdn节点" aria-label="Permalink to &quot;3、引申第2问：这样会导致一个问题，用户首次访问总会向源服务器缓存，势必速度会降下来，如何提前缓存到cdn节点？&quot;">​</a></h3><ul><li><p>手动预热</p><p>部分cdn服务商提供“预热”功能，允许开发者手动触发资源缓存到节点。</p></li><li><p>版本化文件名</p><ol><li><strong>有版本控制</strong>：当资源的**<u><em>版本号发生变化</em></u>**时，CDN 节点会将其视为新的资源请求，主动从源服务器获取新资源并更新缓存。例如，当把 <code>styles.css?v=1.0</code> 更新为 <code>styles.css?v=1.1</code> 时，CDN 节点接收到对 <code>styles.css?v=1.1</code> 的请求，会主动从源服务器获取该资源并缓存。</li><li><strong>无版本控制</strong>：CDN 节点主要依赖缓存*<u><strong>过期时间</strong></u>*来判断是否需要从源服务器获取新资源。如果缓存未过期，即使源服务器上的资源已更新，CDN 节点也会继续提供旧的缓存资源，直到缓存过期才去源服务器获取最新资源。</li></ol></li><li><p>基于源站通知更新</p><p>源站可以主动通知 CDN 节点某些内容已经更新，CDN 节点收到通知后会及时更新缓存</p></li></ul><h3 id="_4、是否存在多级节点服务器" tabindex="-1">4、是否存在多级节点服务器？ <a class="header-anchor" href="#_4、是否存在多级节点服务器" aria-label="Permalink to &quot;4、是否存在多级节点服务器？&quot;">​</a></h3><p>存在，边缘服务器有两种关联源服务器的方式，</p><p><img src="'+c+'" alt="image-20250218150453144"></p><p>中间节点：位于区域中心，负责聚合多个边缘节点的请求</p><p>一些 CDN 服务商会采用<strong>多级缓存架构</strong></p><h3 id="_5、cdn是针对静态资源的吗" tabindex="-1">5、cdn是针对静态资源的吗？ <a class="header-anchor" href="#_5、cdn是针对静态资源的吗" aria-label="Permalink to &quot;5、cdn是针对静态资源的吗？&quot;">​</a></h3><p>是的！静态资源一般是在发版的时候会不同。动态资源是实时的，很少用于缓存。</p><h3 id="_6、当不使用cdn-dns网络请求是一个怎样的过程" tabindex="-1">6、当不使用cdn，dns网络请求是一个怎样的过程？ <a class="header-anchor" href="#_6、当不使用cdn-dns网络请求是一个怎样的过程" aria-label="Permalink to &quot;6、当不使用cdn，dns网络请求是一个怎样的过程？&quot;">​</a></h3><p><strong>不使用cdn，那么就是找到域名对应的ip地址，直接向源站请求获取资源的过程</strong></p><p>用户输入example.com后，会经历以下的过程：</p><ol><li><p>客户端先在<code>本机的hosts文件查</code>找域名对应的ip地址</p></li><li><p>本机hosts文件没有，会进入到<code>本地dns</code>查找</p><p>本地DNS：用户设备或本地网络中配置的DNS服务器</p><p>操作系统DNS缓存、路由器DNS、本地网络中的DNS服务器、DHCP分配的DNS服务器、手动配置的DNS服务器</p></li><li><p>如果本地没有，就会依次向根DNS、顶级域DNS、权威DNS进行询问</p></li></ol><p><strong>使用cdn，dns找到的最终ip地址，可能是节点服务器的ip地址，也可能是源站的ip地址，在返回这个ip地址，向他请求资源</strong></p><h2 id="八、实际操作" tabindex="-1">八、实际操作 <a class="header-anchor" href="#八、实际操作" aria-label="Permalink to &quot;八、实际操作&quot;">​</a></h2><h3 id="_1、查看公司的文件存储" tabindex="-1">1、查看公司的文件存储 <a class="header-anchor" href="#_1、查看公司的文件存储" aria-label="Permalink to &quot;1、查看公司的文件存储&quot;">​</a></h3><p>七牛地址：<a href="https://portal.qiniu.com/signin" target="_blank" rel="noreferrer">https://portal.qiniu.com/signin</a> 七牛账号：cjf@dream.cn 七牛密码：ghq#@!6</p><h4 id="_1-1-公司的bucket" tabindex="-1">1.1 公司的bucket <a class="header-anchor" href="#_1-1-公司的bucket" aria-label="Permalink to &quot;1.1 公司的bucket&quot;">​</a></h4><h4 id="_1-创建源服务器-空间-bucket" tabindex="-1">（1）创建源服务器（空间/bucket） <a class="header-anchor" href="#_1-创建源服务器-空间-bucket" aria-label="Permalink to &quot;（1）创建源服务器（空间/bucket）&quot;">​</a></h4><p>可以指定服务器的位置</p><p><img src="'+d+'" alt="image-20250218173313110"></p><h4 id="_2-总揽其中的一个空间-rbebagdata" tabindex="-1">（2）总揽其中的一个空间：rbebagdata <a class="header-anchor" href="#_2-总揽其中的一个空间-rbebagdata" aria-label="Permalink to &quot;（2）总揽其中的一个空间：rbebagdata&quot;">​</a></h4><p><img src="'+r+'" alt="image-20250219111931797"></p><h4 id="_3-进入到rbebagdata空间-查看到存储的所有文件" tabindex="-1">（3）进入到rbebagdata空间，查看到存储的所有文件 <a class="header-anchor" href="#_3-进入到rbebagdata空间-查看到存储的所有文件" aria-label="Permalink to &quot;（3）进入到rbebagdata空间，查看到存储的所有文件&quot;">​</a></h4><p><img src="'+g+'" alt="image-20250219103818036"></p><p>可以查看到项目中用到的katex.js文件</p><p><a href="https://ziyuan.ebag.readboy.com/katex/0.16.7/katex.min.js" target="_blank" rel="noreferrer">https://ziyuan.ebag.readboy.com/katex/0.16.7/katex.min.js</a></p><p><img src="'+m+'" alt="image-20250218162941013"></p><p><img src="'+h+'" alt="image-20250219104000896"></p><h4 id="_4-进入域名管理栏" tabindex="-1">（4）进入域名管理栏 <a class="header-anchor" href="#_4-进入域名管理栏" aria-label="Permalink to &quot;（4）进入域名管理栏&quot;">​</a></h4><p>创建bucket后，七牛云会提供一个免费的测试地址可以访问，但是只有一个月试用期。测试正式环境需要有域名可以访问到这个bucket。</p><p><img src="'+u+'" alt="image-20250219110525220"></p><p>有两种方式绑定：</p><p>​ 自定义 CDN 加速域名：通过cdn的方式加速访问</p><p>​ 自定义源站域名：直接访问到bucket，即直接访问源服务器</p><ul><li><p>点击绑定域名</p><p>这里需要有域名，就需要去购买域名，根据域名后缀、服务、年限不同价格也会不一样</p><p><img src="'+k+'" alt="image-20250219110709032"></p><p><img src="'+_+'" alt="image-20250219110859663"></p></li></ul><h4 id="_5-进入-ziyuan-ebag-readboy-com域名" tabindex="-1">（5）进入 ziyuan.ebag.readboy.com域名 <a class="header-anchor" href="#_5-进入-ziyuan-ebag-readboy-com域名" aria-label="Permalink to &quot;（5）进入 ziyuan.ebag.readboy.com域名&quot;">​</a></h4><p><img src="'+b+'" alt="image-20250219112611446"></p><p>可以设置访问这个域名的一些配置，加速cdn访问</p><h4 id="_1-2-什么是cname" tabindex="-1">1.2 什么是CNAME？ <a class="header-anchor" href="#_1-2-什么是cname" aria-label="Permalink to &quot;1.2 什么是CNAME？&quot;">​</a></h4><p>现在是一个bucket有多个域名，在访问域名时如何对应到bucket，CNAME就是处理这种映射关系。</p><p>定义：CNAME是DNS（域名系统）中一种记录类型，将域名的别名指向另一个域名（规范域名）。</p><p>比如：</p><p>你有一个域名<code>cdn.example.com</code>，要它指向主域名<code>example.com</code>，可以给<code>cdn.example.com</code>设置一个CNAME（ <code>example.cdnprovider.com</code>）。即<code>cdn.example.com</code> =&gt; <code>example.cdnprovider.com</code> =&gt; <code>example.com</code></p><p><strong>CNAME只有一个起别名的作用</strong>，CNAME和cdn是两种行为</p><ul><li><p>CNAME 解析的流程</p><p>用户访问 <code>cdn.example.com</code>，浏览器向 DNS 查询 <code>cdn.example.com</code> 的 IP 地址。</p><ol><li><p>DNS 解析</p><p>DNS 发现 <code>cdn.example.com</code> 有一条 CNAME 记录指向 <code>example.cdnprovider.com</code>。</p><p>DNS 继续查询 <code>example.cdnprovider.com</code> 的 IP 地址，并返回给浏览器。</p></li><li><p><strong>请求发送到 CDN 节点</strong></p><p>浏览器向 <code>example.cdnprovider.com</code> 的 IP 地址（即 CDN 节点）发起请求。</p></li></ol></li><li><p>cdn的行为</p><p>如果 CDN 节点没有缓存资源，会根据你配置的源站地址回源拉取资源。</p><ol><li>访问<code>cdn.example.com/app.js</code>CNAME到<code>example.cdnprovider.com</code></li><li><code>example.cdnprovider.com</code> 指向离用户最近的 CDN 节点服务器</li><li>节点没有缓存，再到<code>example.com</code></li></ol></li></ul><h4 id="_1-3-拓展-a-记录是什么" tabindex="-1">1.3 拓展：A 记录是什么 <a class="header-anchor" href="#_1-3-拓展-a-记录是什么" aria-label="Permalink to &quot;1.3 拓展：A 记录是什么&quot;">​</a></h4><p>A记录是DNS中的一种记录类型，将域名直接映射到IPv4地址，用户可以通过访问域名访问服务器。</p><p>A记录的实例：</p><p>假设你有一个域名 <code>example.com</code>，并希望将其解析到服务器的 IP 地址 <code>93.184.216.34</code>，你可以设置以下 A 记录：</p><ul><li><strong>主机名</strong>：<code>example.com</code></li><li><strong>记录类型</strong>：<code>A</code></li><li><strong>值</strong>：<code>93.184.216.34</code></li><li><strong>TTL</strong>：<code>3600</code>（单位：秒）</li></ul><p>使用场景：</p><ol><li><p>网络托管</p><p>将域名托管到服务器ip地址：<code>www.example.com</code> → <code>93.184.216.34</code></p></li><li><p>子域名指向不同服务器</p><ul><li><code>blog.example.com</code> → <code>192.0.2.1</code></li><li><code>shop.example.com</code> → <code>192.0.2.2</code></li></ul></li><li><p><strong>负载均衡</strong></p><p>为同一个域名设置多个 A 记录，指向不同的服务器 IP 地址，实现简单的负载均衡。例如：</p><ul><li><code>example.com</code> → <code>192.0.2.1</code></li><li><code>example.com</code> → <code>192.0.2.2</code></li></ul></li></ol><p><code>A 记录只能用于 IPv4 地址。如果需要支持 IPv6 地址，需要使用 AAAA 记录。</code></p><h4 id="_1-4-cnane和a记录之间的关系" tabindex="-1">1.4 CNANE和A记录之间的关系 <a class="header-anchor" href="#_1-4-cnane和a记录之间的关系" aria-label="Permalink to &quot;1.4 CNANE和A记录之间的关系&quot;">​</a></h4><p>假设有这样子的配置</p><ul><li>A记录：example.com -&gt; 192.0.2.1</li><li>CNAME：cdn.example.com -&gt; www.example.com -&gt; example.com</li></ul><p>当用户访问cdn.example.com时</p><ol><li>DNS查找cdn.example.com，发现有条CNAME：www.example.com，就在节点服务器上找资源</li><li>没有找到，继续往下找，CNAME指向example.com</li><li>DNS再找expamle.com，发现它是一个A记录，指向192.0.2.1</li><li>最终返回192.0.2.1</li></ol><p>看下公司的</p><p>有个CNAME<img src="'+x+'" alt="image-20250220113752505"></p><h4 id="_1-5-拓展-操作绑定cdn域名" tabindex="-1">1.5 拓展：操作绑定cdn域名 <a class="header-anchor" href="#_1-5-拓展-操作绑定cdn域名" aria-label="Permalink to &quot;1.5 拓展：操作绑定cdn域名&quot;">​</a></h4><p>假设我在阿里云上购买了域名example.cn，这个域名已经备好案了，它的多级域名就不用再备案了。我想用aa.example.cn这个域名去作为加速域名，加速访问七牛云上的bucket的资源</p><p><img src="'+C+'" alt="image-20250220164640151"></p><p>这时候，七牛云厂商就会对这个aa.example.cn创建一条CNAME，需要在阿里云的域名列表中将aa.example.cn链接这个CNAME。</p><p>当我们访问到aa.example.cn，实际上就是查到CNAME，就被七牛云托管了，可能会有往下继续查找整个链路。</p><p>----------看下公司的域名</p><p>公司在阿里云上有一个域名strongwind.cn<img src="'+q+'" alt="image-20250220170409954"></p><p>这里配置的直接就是权威dns</p><p><img src="'+N+'" alt="image-20250221135649181"></p><p>可以查看到在这个域名下，设置了很多 多级域名 作为A记录、CNAME<img src="'+E+'" alt="image-20250220170543776"></p><p>在七牛云中可以查到有很多这个域名的配置项<img src="'+D+'" alt="image-20250220170710187"></p><p>点进去rbebag-zy-test.strongwind.cn，在这个域名下就有这个七牛云给出的CNAME：iduz9e7.qiniudns.com<img src="'+y+'" alt="image-20250220170829180"></p><p>在阿里云的这个域名列表中就可以查到它的对应关系<img src="'+A+'" alt="image-20250220171025923"></p><p>通过dig命令查找，当我访问rbebag-zy-test.strongwind.cn的时候，整一条dns的链路</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dig rbebag-zy-test.strongwind.cn</span></span></code></pre></div><p><img src="'+P+'" alt="image-20250220171901171"></p><ol><li><p>rbebag-zy-test.strongwind.cn CNAME 到 iduz9e7.qiniudns.com</p></li><li><p>iduz9e7.qiniudns.com CNAME 到 allcdn.china.qiniu.qnydns.com</p></li><li><p>allcdn.china.qiniu.qnydns.com CNAME allcdn.lv2.qnydns.com</p></li><li><p>查找到allcdn.lv2.qnydns.com有两个A记录，说明有两个节点都有资源，实际提供服务的服务器的 IP 地址</p><p>有两种情况</p><ul><li>cdn：两个cdn节点都有资源</li><li>负载均衡：源服务器的两个ip都有部署</li></ul></li></ol><h4 id="_1-6-本地的一个端口可以设置一个a记录吗" tabindex="-1">1.6 本地的一个端口可以设置一个A记录吗？ <a class="header-anchor" href="#_1-6-本地的一个端口可以设置一个a记录吗" aria-label="Permalink to &quot;1.6 本地的一个端口可以设置一个A记录吗？&quot;">​</a></h4><p>概念混淆了</p><p>A记录是在DNS中的资源记录类型，域名对应ip4地址的这种映射关系是在DNS服务器中配置的，localhost对应的127.0.0.1是在本地系统的hosts文件中配置的。</p><h4 id="_1-7-一个bucket为什么需要设置那么多个加速域名" tabindex="-1">1.7 一个bucket为什么需要设置那么多个加速域名？ <a class="header-anchor" href="#_1-7-一个bucket为什么需要设置那么多个加速域名" aria-label="Permalink to &quot;1.7 一个bucket为什么需要设置那么多个加速域名？&quot;">​</a></h4><p>观察掘金社区：</p><ul><li><p>css文件访问域名</p><p><img src="'+S+'" alt="image-20250225153007771"></p></li><li><p>js文件访问域名会不同</p><p><img src="'+f+'" alt="image-20250225153213246"></p><p><img src="'+v+'" alt="image-20250225153231045"></p><p><img src="'+B+'" alt="image-20250225153247997"></p></li><li><p>imge文件访问域名会不同</p><p><img src="'+w+'" alt="image-20250225153454375"></p><p><img src="'+M+'" alt="image-20250225153506264"></p></li></ul><p>解答：</p><ol><li><p>关键原因：提升性能和用户体验</p><ul><li><p>突破浏览器的并发限制</p><p><strong>浏览器为了避免对服务器造成过大压力</strong>，通常会对同一域名下的并发连接数量进行限制。</p><p>例如，Chrome 浏览器对同一域名下的并发连接数限制一般为 6 - 8 个</p><p>当网站资源较多时，使用多个加速域名可以让浏览器同时从不同域名下载资源，增加并发下载数量，从而加快资源的加载速度，提升页面的整体加载性能。</p></li><li><p>不同资源可以设置不同的缓存策略</p></li><li><p>资源加载优先级管理</p><p>浏览器会根据资源类型和渲染需求来加载资源优先级，不用资源设置不同域名们可以更清晰地控制加载顺序。</p><p>看掘金首页，顺序大致是 css 》js 》图片 》请求</p></li></ul></li><li><p>根据上面的观察，是对不同资源类型的适配</p><p>添加cdn域名的时候，会有不同的策略，资源策略</p><p><img src="'+F+'" alt="image-20250225154758056"></p><p>对于图片资源，可以使用专门的图片加速域名，并设置较长的缓存时间，减少图片的重复下载；</p><p>对于动态脚本资源，可以使用另一个加速域名，并设置较短的缓存时间，确保用户能够及时获取到最新的脚本内容。</p></li><li><p>满足业务和运营要求</p><p>根据业务、地域、用户群体的不同可以对域名进行优化</p></li><li><p>提高安全性</p><p>当有一个域名被攻击了，DDOS攻击、CC攻击，还可以使用其他域名去访问</p></li></ol><p><strong><u><em>引申 》》为什么浏览器会有对域名访问的限制？跳转《http:为什么浏览器对同一域名的访问有限制.md》</em></u></strong></p><h3 id="_2、在公司项目中-使用cdn和不使用cdn-看看获取资源的速度差异" tabindex="-1">2、在公司项目中，使用cdn和不使用cdn，看看获取资源的速度差异 <a class="header-anchor" href="#_2、在公司项目中-使用cdn和不使用cdn-看看获取资源的速度差异" aria-label="Permalink to &quot;2、在公司项目中，使用cdn和不使用cdn，看看获取资源的速度差异&quot;">​</a></h3><p><img src="'+j+'" alt="image-20250219175424264"></p><p>每个地址加载了三次平均数据显示</p><ul><li><p>源站图加载数据<img src="'+I+'" alt="image-20250219175653866"></p><p><img src="'+L+'" alt="image-20250219175927854"></p><p>到20.2秒完成加载</p></li><li><p>cdn加速访问</p><p><img src="'+z+'" alt="image-20250219180148221"></p><p><img src="'+G+'" alt="image-20250219180246816"></p><p>到18.7秒完成加载</p></li></ul><h3 id="_3、使用阿里云的oss存储自己操作一个bucket" tabindex="-1">3、使用阿里云的oss存储自己操作一个bucket <a class="header-anchor" href="#_3、使用阿里云的oss存储自己操作一个bucket" aria-label="Permalink to &quot;3、使用阿里云的oss存储自己操作一个bucket&quot;">​</a></h3><p><img src="'+T+'" alt="image-20250219152839716"></p><p>申请域名好麻烦就不搞了</p>',137)]))}const $=a(H,[["render",Q]]);export{Y as __pageData,$ as default};
