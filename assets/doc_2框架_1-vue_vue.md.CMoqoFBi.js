import{_ as i,c as a,o as t,ae as l}from"./chunks/framework.DD4G2i-B.js";const n="/doc/assets/image-20250304170140268.wHl4VLZ3.png",p="/doc/assets/image-20250304170815265.WC9u5fEy.png",e="/doc/assets/image-20250304145818106.CxFmD6m_.png",h="/doc/assets/image-20250304164547060.DEmVNkaI.png",k="/doc/assets/image-20250304164735491.rPTKAvhY.png",r="/doc/assets/image-20250304165003821.NpZmqOcY.png",d="/doc/assets/image-20250305101720915.Tdp7ycxY.png",F=JSON.parse('{"title":"vue","description":"","frontmatter":{},"headers":[],"relativePath":"doc/2框架/1-vue/vue.md","filePath":"doc/2框架/1-vue/vue.md"}'),E={name:"doc/2框架/1-vue/vue.md"};function o(g,s,c,u,y,m){return t(),a("div",null,s[0]||(s[0]=[l('<h1 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h1><h2 id="_1、vite的热部署" tabindex="-1">1、vite的热部署 <a class="header-anchor" href="#_1、vite的热部署" aria-label="Permalink to &quot;1、vite的热部署&quot;">​</a></h2><h3 id="_1-1-知识补充" tabindex="-1">1.1 知识补充 <a class="header-anchor" href="#_1-1-知识补充" aria-label="Permalink to &quot;1.1 知识补充&quot;">​</a></h3><p>可以加载资源</p><p><img src="'+n+'" alt="image-20250304170140268"></p><p>import两种不同写法：</p><ul><li><p>import()</p><p>动态导入资源，运行时执行，相对灵活</p></li><li><p>import xx from &#39;./xx&#39;</p><p>静态导入资源，编译阶段时解析，对环境要求严格</p><p>为什么需要在编译阶段解析？</p><ol><li>文件之间依赖关系确定，提前确保在运行时不会错误</li><li>语法语义分析</li></ol></li></ul><p>浏览器加载本地服务资源</p><p><img src="'+p+`" alt="image-20250304170815265"></p><p>现代浏览器不支持es模块，但<code>某些现代浏览器和 Node.js 环境中，即使没有明确开启 ES 模块支持，也可以在特定情况下使用</code></p><h3 id="_1-2-加载资源的写法" tabindex="-1">1.2 加载资源的写法 <a class="header-anchor" href="#_1-2-加载资源的写法" aria-label="Permalink to &quot;1.2 加载资源的写法&quot;">​</a></h3><ul><li><p>动态加载</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：动态加载一个组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./MyComponent.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/about&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./views/About.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div></li><li><p>静态加载</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./xx&#39;</span></span></code></pre></div></li></ul><h3 id="_1-3-如何实现动态加载" tabindex="-1">1.3 如何实现动态加载 <a class="header-anchor" href="#_1-3-如何实现动态加载" aria-label="Permalink to &quot;1.3 如何实现动态加载&quot;">​</a></h3><h2 id="_2、ref和reactive的区别" tabindex="-1">2、ref和reactive的区别 <a class="header-anchor" href="#_2、ref和reactive的区别" aria-label="Permalink to &quot;2、ref和reactive的区别&quot;">​</a></h2><h2 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h2><h3 id="_1、什么是native-esm" tabindex="-1">1、什么是Native ESM？ <a class="header-anchor" href="#_1、什么是native-esm" aria-label="Permalink to &quot;1、什么是Native ESM？&quot;">​</a></h3><p>原生 ECMA Module：原生es模式，js语言中一种原生、标准化的模块化机制</p><p>可以使用import、export实现变量函数导入导出</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Native ESM Example&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- script默认不使用module模式 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// index.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { myFunction } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./utils.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// util.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This is a function from utils module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2、为什么vue3-vite项目在开发时可以在浏览器中打开访问" tabindex="-1">2、为什么vue3+vite项目在开发时可以在浏览器中打开访问？ <a class="header-anchor" href="#_2、为什么vue3-vite项目在开发时可以在浏览器中打开访问" aria-label="Permalink to &quot;2、为什么vue3+vite项目在开发时可以在浏览器中打开访问？&quot;">​</a></h3><p>流程如下</p><p>当执行npm run dev时</p><ol><li><p>启动一个本地开发服务器</p></li><li><p>使用原生es模块导入js</p><p>浏览器可以通过import按需请求文件，vite服务器可以实时编译</p><p><img src="`+e+'" alt="image-20250304145818106"></p></li><li><p>文件请求处理</p><p>在浏览器中访问 <code>http://localhost:5173</code> 时，会发生以下过程</p><ol><li>请求index.html</li><li>解析入口文件main.js</li><li>动态编译文件：.vue、.scss/.less、.ts</li><li>把编译后的文件通过http返回浏览器</li></ol></li><li><p>模块热更新：通过websocket实现</p></li><li><p>请求借口</p></li><li><p>浏览器兼容</p></li></ol><p>简单来说：浏览器解析到入口文件main.js，根据main.js动态导入资源，资源包括各种各样的文件，vite去解析成浏览器可以识别再返回给浏览器。</p><h3 id="_4、衍生问题-怎么观察到vue是动态加载资源的" tabindex="-1">4、衍生问题：怎么观察到vue是动态加载资源的？ <a class="header-anchor" href="#_4、衍生问题-怎么观察到vue是动态加载资源的" aria-label="Permalink to &quot;4、衍生问题：怎么观察到vue是动态加载资源的？&quot;">​</a></h3><ul><li><p>在开发这工具中有sources/page：可以看见当前加载的文件内容</p><p>当前页面</p><p><img src="'+h+'" alt="image-20250304164547060"></p><p>页面资源显示</p><img src="'+k+'" alt="image-20250304164735491" style="zoom:67%;"><p><img src="'+r+'" alt="image-20250304165003821"></p></li><li><p>可以观察到当切换tab的时候会动态加载component、嵌入的网页的资源</p></li><li><p>开发环境<img src="'+d+'" alt="image-20250305101720915">加上时间戳让浏览器觉得这是一个新的文件，重新请求，获取最新资源</p></li></ul>',28)]))}const _=i(E,[["render",o]]);export{F as __pageData,_ as default};
