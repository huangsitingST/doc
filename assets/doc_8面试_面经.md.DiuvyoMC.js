import{_ as i,c as a,o as p,ae as n}from"./chunks/framework.DD4G2i-B.js";const h="/doc/assets/image-20250519092758232.CsOH6sBn.png",l="/doc/assets/image-20250615143939333.aBHXlNXe.png",o=JSON.parse('{"title":"面试记录","description":"","frontmatter":{},"headers":[],"relativePath":"doc/8面试/面经.md","filePath":"doc/8面试/面经.md"}'),t={name:"doc/8面试/面经.md"};function k(e,s,E,r,d,g){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="面试记录" tabindex="-1">面试记录 <a class="header-anchor" href="#面试记录" aria-label="Permalink to &quot;面试记录&quot;">​</a></h1><h2 id="数字马力-5-16" tabindex="-1"><strong>数字马力 5/16</strong> <a class="header-anchor" href="#数字马力-5-16" aria-label="Permalink to &quot;**数字马力 5/16**&quot;">​</a></h2><h3 id="_1、面项目比较多" tabindex="-1">1、面项目比较多 <a class="header-anchor" href="#_1、面项目比较多" aria-label="Permalink to &quot;1、面项目比较多&quot;">​</a></h3><p>​ <u>micro-app原理</u></p><p>​ 核心在于将一个大型的项目，拆分成一个个小的独立灵活的项目，独立开发、独立部署， 降低开发成本，减少项目之间的耦合</p><ul><li><p>micro-app初始化</p></li><li><p>路由配置</p></li><li><p>数据传递</p><p>主应用 -&gt; 子应用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">主应用  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">micro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;appData&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">micro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子应用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.microApp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addDataListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;收到数据:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data.user.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// John</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><p>子应用-&gt;主应用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子应用 window.microApp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, payload: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;数据内容&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">主应用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 主应用监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">microApp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setDataListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;child-app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;子应用上报:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data.payload)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ul><p>​ <u>js-brige跟安卓&amp;平板适配不</u></p><p>​ 应用使用flutter进行开发，可以多端打包，去适配不用的系统，jsbridge可以适配，如果出现了兼容问题，一般都是由应用端去解决</p><h3 id="_2、基础" tabindex="-1">2、基础 <a class="header-anchor" href="#_2、基础" aria-label="Permalink to &quot;2、基础&quot;">​</a></h3><p>​ 一点js的结构：{...undefined} {...null} ✅</p><p><img src="`+h+`" alt="image-20250519092758232"></p><p>​ 1+0.2 === 3</p><p>​ 小算法：字符串找指定下标</p><p>​ 针对vue的性能优化 ✅</p><p>​ vuex和pina的区别</p><p>​ vuex的响应式是结合vue2的响应式系统</p><p>​ pina是vue3的proxy代理响应，有更简洁的api，使用vue3的组合式api</p><p>​ 父子组件传数据</p><p>​ vue双向绑定原理</p><p>​ webpack和vite打包的区别</p><p>​ webpack全量打包，vite按需打包</p><p>​ vite打包速度会更快</p><p>​</p><h3 id="_3、其他" tabindex="-1">3、其他 <a class="header-anchor" href="#_3、其他" aria-label="Permalink to &quot;3、其他&quot;">​</a></h3><p>​ <u>问在这里的公司的突出收获？</u></p><p>​ 技术：</p><p>​ 精进vue3+vite的理解，也会看同事写的代码，接触到工程化的东西，比如：ci、自动化部署、docker镜像、cdn的东西，七牛云阿里云这些。</p><p>​ 公司也有技术文档，都是根据公司的实际情况优化输出的东西，会有应用场景，我就会主动去要一些账号密码去登录公司的云产品去看一看；gitlab是自己部署的，要管理员账号去看看，有什么权限和功能。</p><p>​ 独立解决问题的能力：比如说一个浙里办的项目，用vite打包会出现路由解析问题，就直接转成webpack打包 小程序会不兼容flex布局的gap属性，es6语法不兼容，使用es6转成es5 有一次下午两点中要演示项目，中午团队协同更新一个需求，整个中午都在上线和测试</p><p>​ 项目：</p><p>​ 参与和推进项目的进行，参与过多端的开发，独立开发和共同开发项目，提高了独立开发和协同开发的能力</p><p>​ 因为参与的项目比较多，在理解需求之后，接触到新的项目可以很快上手开发</p><p>​ 软技能：</p><p>​ 沟通能力的提高</p><p>​ <u>为什么离职？</u></p><p>​ （不涨薪；大小周；公司正在转型中，管理混乱，从生产转向互联网。）</p><p>​ <strong>避雷：不要指责老东家</strong></p><p>​ （大小周）</p><p>​ （在选择公司上主要还是看中个人发展，想要更好的发展机会，能去接触更加专业的团队，个人的发展跟环境是分不开，如果有更好的一个晋升途径话，我就会去选择。看看有什么更好的发展机会。）</p><p>​ <u>工作强度高的话能不能担任？</u></p><p>​ （互联网加班是不可避免的，任何职业都会存在加班的现象）</p><p>​ （项目紧张或者开发上线的时候，肯定要加班的，但是我也拒绝无效加班和内卷）</p><p>​ （分析下，是否在业务开发中可以减少时间的花销，减少无效开发，沟通使用通用业务的代码组件）</p><p>​ <u>在工作强度高的情况下怎么保证自己的自我提升？</u></p><p>​ 在实践中学习</p><p>​ 空余时间会看技术文章</p><p>​ 加一些纯技术的群，会参与网友抛出的问题</p><h3 id="_4、提问" tabindex="-1">4、提问 <a class="header-anchor" href="#_4、提问" aria-label="Permalink to &quot;4、提问&quot;">​</a></h3><p>​ <u>贵公司的开发流程是怎样的？</u></p><p>​ <u>贵公司的离职率如何？</u></p><p>​ 前端团队有多少人，整个团队的构成？</p><h2 id="趣印-6-13" tabindex="-1">趣印 6/13 <a class="header-anchor" href="#趣印-6-13" aria-label="Permalink to &quot;趣印 6/13&quot;">​</a></h2><h3 id="_1、面技术会比较多" tabindex="-1">1、面技术会比较多 <a class="header-anchor" href="#_1、面技术会比较多" aria-label="Permalink to &quot;1、面技术会比较多&quot;">​</a></h3><h3 id="_1-1-vuex和pina的区别-pina有什么优化" tabindex="-1">1-1 <u>vuex和pina的区别，pina有什么优化</u> <a class="header-anchor" href="#_1-1-vuex和pina的区别-pina有什么优化" aria-label="Permalink to &quot;1-1 &lt;u&gt;vuex和pina的区别，pina有什么优化&lt;/u&gt;&quot;">​</a></h3><p>详见：/doc/2框架/4-状态管理工具.md</p><h3 id="_1-2-你用vue3的proxy对你有什么好处-或者说-vue3和vue2的区别" tabindex="-1">1-2 <u>你用vue3的proxy对你有什么好处</u>？或者说，vue3和vue2的区别 <a class="header-anchor" href="#_1-2-你用vue3的proxy对你有什么好处-或者说-vue3和vue2的区别" aria-label="Permalink to &quot;1-2 &lt;u&gt;你用vue3的proxy对你有什么好处&lt;/u&gt;？或者说，vue3和vue2的区别&quot;">​</a></h3><h4 id="_1-响应式的优化" tabindex="-1">1 响应式的优化 <a class="header-anchor" href="#_1-响应式的优化" aria-label="Permalink to &quot;1 响应式的优化&quot;">​</a></h4><h5 id="vue2的响应式" tabindex="-1">vue2的响应式 <a class="header-anchor" href="#vue2的响应式" aria-label="Permalink to &quot;vue2的响应式&quot;">​</a></h5><ol><li><p>vue2的响应式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 依赖管理器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, key, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Dep.target) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当前Watcher</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        dep.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">depend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 收集依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (newVal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newVal;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      dep.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通知所有Watcher更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用object.defineProperty重写数据的set跟get，每一个属性都有一个依赖管理器dep，当使用到这个属性的时候，也就是调用到get，在这里往dep push一个watcher，然后更新数据的时候，会调用到set，那么这时候，dep的所有watcher都去notify去更新。</p><p>调用到属性的场景有：watch、computed、页面渲染，这时候就会触发这些场景去更新。</p></li></ol><p>​ 深度遍历每一个属性，为每一个属性劫持他的set、get</p><ol start="2"><li><p>局限性：</p><p>数组的数据变化无法被监听到</p><p>新增的属性也无法被监听到</p></li><li><p>如何解决？</p><p>vue2使用**<code>Object.defineProperty</code>**去劫持对象的属性，无法监听到数组的下标、length和数组原生方法如push、pop。</p></li><li><p>所以vue去重写了数组的原生方法</p></li></ol><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newItem);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 触发更新</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 触发更新</span></span></code></pre></div><ol start="5"><li>显示触发更新</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 强制更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items, index, newValue);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重新赋值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items, newItem]</span></span></code></pre></div><h5 id="vue3的响应式" tabindex="-1">vue3的响应式 <a class="header-anchor" href="#vue3的响应式" aria-label="Permalink to &quot;vue3的响应式&quot;">​</a></h5><ul><li><p>响应式</p><p>使用proxy去代理整个对象，拦截所有操作（读/写/删/查）</p><img src="`+l+`" alt="image-20250615143939333" style="zoom:50%;"><p>什么是reflect，和proxy？</p><p>同样是在set的时候时候收集依赖，在get的时候通知更新</p><p>在这一步 if(_isObject(v))是一个递归</p></li><li><p>vue3的ref和reactive的区别</p><ol><li><p>ref是劫持属性的.value</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RefImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存储当前值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _rawValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存储原始值（用于比较）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> dep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 依赖集合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> __v_isRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 标记为 ref 对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._rawValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对象类型转为 reactive</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    track</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 依赖收集</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newValue, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._rawValue)) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值变化检查</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._rawValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newValue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newValue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 触发更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果ref的值是原始值，就直接代理这个 this._value = value</p><p>如果reactive是引用值，就设制成 this._value = reactive(valeu)</p></li></ol></li></ul><h3 id="vue3解决了什么问题-带给你什么好处" tabindex="-1">vue3解决了什么问题/带给你什么好处？ <a class="header-anchor" href="#vue3解决了什么问题-带给你什么好处" aria-label="Permalink to &quot;vue3解决了什么问题/带给你什么好处？&quot;">​</a></h3><p>1、vure3使用proxy的方式代理了组件的属性，监听到了数组的下标和和原生原生方法，无需在使用数组的时候手动更新页面</p><p>2、代码组织和逻辑复用不同</p><p>写法上，vue2使用option API，属性和方法写在data、methods上，跟功能是割裂开的</p><p>vue3使用了composition API，代码和功能是聚合的，可读性高</p><p>使用usehooks代替了vue2的mixins</p><p>3、减小打包的体积，优化tree-shaking</p><h3 id="_1-3-大屏适配的公式" tabindex="-1">1-3 <u>大屏适配的公式</u> <a class="header-anchor" href="#_1-3-大屏适配的公式" aria-label="Permalink to &quot;1-3 &lt;u&gt;大屏适配的公式&lt;/u&gt;&quot;">​</a></h3><p>使用rem方式</p><ul><li><p>将px转成rem</p><p><strong><code>postcss-pxtorem</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;postcss-pxtorem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      rootValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基准值：设计稿宽度/10（如375px设计稿 → 37.5）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      propList: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 所有属性都转换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      selectorBlackList: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.no-rem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 忽略转换的选择器（如排除第三方UI库类名）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      unitPrecision: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rem保留5位小数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minPixelValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 小于2px不转换（避免微小尺寸变形）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mediaQuery: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 媒体查询中的px不转换[2,6](@ref)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>设计稿是1920px，假设元素的大小全部是设计稿中的数值</p><p>那么，rootValue设置成192</p><p>假设一个元素的宽度是100px，那么就是100 / 192 = 0.52rem，如果说屏幕宽度正好是1920px，那么这个元素的宽度就是0.52rem</p></li><li><p>计算rem</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rem.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setRem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1920</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基于设计稿宽度 1920</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.documentElement.style.fontSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scale, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, setRem);</span></span></code></pre></div><p>如果屏幕变化了，计算出与设计稿的相对值，重新计算fontSize，那么就是0.52去乘这个新的fontsize</p></li></ul><h3 id="_1-4-micro-app怎么改变子应用的div元素-这个你是自己封装的还是用别人写好的" tabindex="-1">1-4 <u>Micro-app怎么改变子应用的div元素，这个你是自己封装的还是用别人写好的</u> <a class="header-anchor" href="#_1-4-micro-app怎么改变子应用的div元素-这个你是自己封装的还是用别人写好的" aria-label="Permalink to &quot;1-4 &lt;u&gt;Micro-app怎么改变子应用的div元素，这个你是自己封装的还是用别人写好的&lt;/u&gt;&quot;">​</a></h3><p>/doc/4项目业务/2-项目学习/micro-app.md</p><h3 id="_1-5-vite的部署优化-rollup定义大小" tabindex="-1">1-5 <u>Vite的部署优化：rollup定义大小</u> <a class="header-anchor" href="#_1-5-vite的部署优化-rollup定义大小" aria-label="Permalink to &quot;1-5 &lt;u&gt;Vite的部署优化：rollup定义大小&lt;/u&gt;&quot;">​</a></h3><h3 id="_1-6-路由拦截" tabindex="-1">1-6 <u>路由拦截</u> <a class="header-anchor" href="#_1-6-路由拦截" aria-label="Permalink to &quot;1-6 &lt;u&gt;路由拦截&lt;/u&gt;&quot;">​</a></h3><h3 id="_2、提问" tabindex="-1">2、提问 <a class="header-anchor" href="#_2、提问" aria-label="Permalink to &quot;2、提问&quot;">​</a></h3><p>开发流程</p><p>团队组成情况</p><p>问工作时间？</p><p>薪资：我这个年限的工作经验，在你们公司的薪资范围是多少呢？</p><h1 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h1><p>1、找工作是双向选择的，你要看这家公司合你的眼不？环境什么的</p><p>2、简历优化：不要写太多的技术点，针对写的东西去研究</p>`,88)]))}const c=i(t,[["render",k]]);export{o as __pageData,c as default};
