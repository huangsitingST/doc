import{_ as e,c as i,o as s,ae as t}from"./chunks/framework.DD4G2i-B.js";const l="/doc/assets/image-20250303205210917.CrBem70Y.png",r="/doc/assets/image-20250225103555106.DKSrql0c.png",p="/doc/assets/image-20250225112127986.Cs2wLuNw.png",h="/doc/assets/image-20250225112215594.B1aAW9Te.png",n="/doc/assets/image-20250225112340047.C0udAkHJ.png",o="/doc/assets/image-20250225112531666.DiU6cxFD.png",c="/doc/assets/image-20250225112610350.f1Dg_vUm.png",v=JSON.parse('{"title":"从零开始搭建一个vue","description":"","frontmatter":{},"headers":[],"relativePath":"doc/2框架/1-vue/0-从零开始搭建一个vue.md","filePath":"doc/2框架/1-vue/0-从零开始搭建一个vue.md"}'),d={name:"doc/2框架/1-vue/0-从零开始搭建一个vue.md"};function k(b,a,u,m,g,_){return s(),i("div",null,a[0]||(a[0]=[t('<h1 id="从零开始搭建一个vue" tabindex="-1">从零开始搭建一个vue <a class="header-anchor" href="#从零开始搭建一个vue" aria-label="Permalink to &quot;从零开始搭建一个vue&quot;">​</a></h1><p><a href="https://www.bilibili.com/video/BV1dt4y1K7BF?spm_id_from=333.788.player.switch&amp;vd_source=dde64d07ecb0f5155b9ee44781f029a0" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1dt4y1K7BF?spm_id_from=333.788.player.switch&amp;vd_source=dde64d07ecb0f5155b9ee44781f029a0</a></p><p><img src="'+l+`" alt="image-20250303205210917"></p><h2 id="_1、sfc" tabindex="-1">1、SFC <a class="header-anchor" href="#_1、sfc" aria-label="Permalink to &quot;1、SFC&quot;">​</a></h2><p>single file components 单文件组件</p><p>将模板、脚本和样式封装在一个文件中</p><h2 id="_2、webpack-开发时依赖" tabindex="-1">2、webpack：开发时依赖 <a class="header-anchor" href="#_2、webpack-开发时依赖" aria-label="Permalink to &quot;2、webpack：开发时依赖&quot;">​</a></h2><p>webpack：整合js代码</p><p>webpack-cli：为了使用webpack的命令</p><p>webpack-dev-server： 热部署</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack-dev-server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示开发时依赖，这些依赖并不放在生产环境中，打包以后的上线产品并不需要webpack的代码功能</span></span></code></pre></div><p><code>-D 表示开发时依赖，这些依赖并不放在生产环境中，打包以后的上线产品并不需要webpack的代码功能</code></p><h2 id="_3、babel-es6转es5" tabindex="-1">3、babel：es6转es5 <a class="header-anchor" href="#_3、babel-es6转es5" aria-label="Permalink to &quot;3、babel：es6转es5&quot;">​</a></h2><p>并不是每一个浏览器都支持高版本的es6语法，就需要将es6转成es5的语法</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> babel-loader</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/core</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/preset-env</span></span></code></pre></div><p>同理，转的依赖就是将vue文件转成浏览器认识的样子：结合html、js、css、打包，全部都是开发时依赖，打包完后的dist文件就是浏览器可以识别的合成文件</p><p><img src="`+r+`" alt="image-20250225103555106"></p><h2 id="_4、脚手架" tabindex="-1">4、脚手架 <a class="header-anchor" href="#_4、脚手架" aria-label="Permalink to &quot;4、脚手架&quot;">​</a></h2><ol><li><p>vue cli：webpack</p></li><li><p>vite</p></li></ol><h2 id="_5、vue-router-客户端路由" tabindex="-1">5、vue-router 客户端路由 <a class="header-anchor" href="#_5、vue-router-客户端路由" aria-label="Permalink to &quot;5、vue-router 客户端路由&quot;">​</a></h2><p>vue作为一个当页面应用，配置完vue-router后，路由的变化会由客户端来控制，就不作为一个请求去请求服务器</p><h3 id="_5-1-router-link和a标签的区别" tabindex="-1">5.1 router-link和a标签的区别 <a class="header-anchor" href="#_5-1-router-link和a标签的区别" aria-label="Permalink to &quot;5.1 router-link和a标签的区别&quot;">​</a></h3><ul><li><a></a>是html的原生超链接标签 <ol><li>用于跳转页面或外部链接</li><li>点击时会刷新页面</li><li>适用于多应用页面（MPA）</li></ol></li><li>**<code>router-link</code>**是vue-router提供的组件 <ol><li>在单应用页面实现路由跳转</li><li>点击时不会刷新页面，而是通过 Vue Router 动态加载目标组件</li><li>适用于单页面应用（SPA）</li></ol></li></ul><h3 id="_5-2-createwebhistiry和createwebhashhistory的区别" tabindex="-1">5.2 createWebHistiry和createWebHashHistory的区别 <a class="header-anchor" href="#_5-2-createwebhistiry和createwebhashhistory的区别" aria-label="Permalink to &quot;5.2 createWebHistiry和createWebHashHistory的区别&quot;">​</a></h3><ol><li><p>createWebHistiry</p><ul><li><p>使用标准的路由形式：<a href="https://example.com/about" target="_blank" rel="noreferrer">https://example.com/about</a></p><p><code>当用户去刷新或者输入地址访问时，浏览器会根据这个url向服务器发送请求，而服务器不知道这个url是前端页面，会按照传统的文件路径查找资源，由于服务器通常不存在与前端路由完全对应的文件或路由(只有打包的dist静态资源)，就会出现找不到404错误</code></p><p>需要nginx服务器配置支持，确保所有的路由都指向index.html，以免访问到的网页不存在而出现404。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  try_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $uri $uri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /index.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>对SEO友好，因为是标准的路径形式，搜索引擎可以正确抓取</p></li></ul></li><li><p>createWebHashHistory</p><ul><li><p>使用hash模式，url中会有#：<a href="https://example.com/#/about" target="_blank" rel="noreferrer">https://example.com/#/about</a></p><p>#之后的哈哈希部分不会发送到服务器，服务器只提供index.html文件就行</p></li><li><p>对SEO不好，哈希值部分不会被搜索引擎抓取</p></li></ul></li></ol><h3 id="_5-3-懒加载" tabindex="-1">5.3 懒加载 <a class="header-anchor" href="#_5-3-懒加载" aria-label="Permalink to &quot;5.3 懒加载&quot;">​</a></h3><ul><li><p>不使用懒加载，直接导入组件<img src="`+p+'" alt="image-20250225112127986"></p><p>打包后只有一个js文件</p><p><img src="'+h+'" alt="image-20250225112215594"></p><p>运行开发环境：npm run dev的时候，首次加载页面就会加载所有的组件</p><p><img src="'+n+'" alt="image-20250225112340047"></p></li><li><p>使用懒加载：在访问到文件的时候才去加载组件<img src="'+o+'" alt="image-20250225112531666"></p><p>打包项目，发现会有懒加载的组件对应的js和css文件</p><p><img src="'+c+'" alt="image-20250225112610350"></p><p>运行开发环境：npm run dev的时候，访问到Eggs.vue组件的时候才去加载Eggs.vue的js文件和css文件</p></li></ul><h2 id="思考" tabindex="-1">思考： <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考：&quot;">​</a></h2><h3 id="_1、什么是seo" tabindex="-1">1、什么是SEO？ <a class="header-anchor" href="#_1、什么是seo" aria-label="Permalink to &quot;1、什么是SEO？&quot;">​</a></h3><p>Search Engine Optimization，搜索引擎优化</p><p>通过遵循搜索引擎的规则和算法以达到以下目的</p><ul><li>对网站的内容、结构、代码等多方面进行优化</li><li>提高网站在搜索引擎自然搜索结果中的排名</li><li>加网站的可见性和流量，最终实现网站的商业目标或其他目标的技术和策略</li></ul><h3 id="_2、为什么createwebhashhistory不利于seo" tabindex="-1">2、为什么createWebHashHistory不利于SEO？ <a class="header-anchor" href="#_2、为什么createwebhashhistory不利于seo" aria-label="Permalink to &quot;2、为什么createWebHashHistory不利于SEO？&quot;">​</a></h3><p>vite：<a href="https://www.bilibili.com/video/BV1GN4y1M7P5?spm_id_from=333.788.player.switch&amp;vd_source=dde64d07ecb0f5155b9ee44781f029a0&amp;p=2" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1GN4y1M7P5?spm_id_from=333.788.player.switch&amp;vd_source=dde64d07ecb0f5155b9ee44781f029a0&amp;p=2</a></p><p>技术蛋老师：<a href="https://space.bilibili.com/327247876" target="_blank" rel="noreferrer">https://space.bilibili.com/327247876</a></p>',35)]))}const y=e(d,[["render",k]]);export{v as __pageData,y as default};
