import{_ as i,c as n,o as e,ae as s,j as t}from"./chunks/framework.Dh1jimFm.js";const p="/assets/image-20250426175026967.BBIZxzv1.png",l="/assets/image-20250428102903495.C67g9STh.png",o="/assets/image-20250428110627421.xP4gV2sV.png",r="/assets/image-20250428110544820.DZ1V57s5.png",h="/assets/image-20250428110627421.xP4gV2sV.png",g="/assets/image-20250428163449761.D_1SKbZb.png",c="/assets/image-20250428172751178.BWZOgifV.png",d="/assets/image-20250428173425559.D5G18zOD.png",m="/assets/image-20250428173441757.DUGaSymg.png",k="/assets/image-20250428190202635.C6_UDXda.png",u="/assets/image-20250428190219538.BYU8VE4T.png",_="/assets/image-20250428191253541.C5w6BtqA.png",x="/assets/image-20250428191537575.CZoDLo8R.png",E="/assets/image-20250428191644200.BudvPNpL.png",b="/assets/image-20250428192024200.DcIxgusR.png",q="/assets/image-20250428192007508.uH76rDbK.png",y="/assets/image-20250428192154041.DuUb-ptY.png",f="/assets/image-20250428194248103.DU5T7R8x.png",F="/assets/image-20250428195419919.Tk74R6iS.png",w="/assets/image-20250428195428554.DhLHQFO_.png",v="/assets/image-20250428162248684.F3-yQIx4.png",C="/assets/image-20250429102834098.6tyLqkum.png",P="/assets/image-20250429103154771.B3J0HUm7.png",B="/assets/image-20250429141220714.DxFTWFBi.png",D="/assets/image-20250429141255072.BamQLxS4.png",T="/assets/image-20250429141313539.DGvvhNTK.png",A="/assets/image-20250429141322339.BR0reRWl.png",N="/assets/image-20250429142349558.CXK-Vm5l.png",S="/assets/image-20250429142550394.BNYcdIpd.png",V="/assets/image-20250429142601630.DQJoJ9hW.png",I="/assets/image-20250429142654063.VOjYQJi5.png",j="/assets/image-20250429204203551.CvHHdjpv.png",O="/assets/image-20250429211123538.CD02MxLJ.png",z=JSON.parse('{"title":"Nginx-下","description":"","frontmatter":{},"headers":[],"relativePath":"doc/6工程化/3-nginx/Nginx-下.md","filePath":"doc/6工程化/3-nginx/Nginx-下.md"}'),H={name:"doc/6工程化/3-nginx/Nginx-下.md"};function R(J,a,L,U,Y,Q){return e(),n("div",null,a[0]||(a[0]=[s('<h1 id="nginx-下" tabindex="-1">Nginx-下 <a class="header-anchor" href="#nginx-下" aria-label="Permalink to &quot;Nginx-下&quot;">​</a></h1><p><a href="https://www.w3ccoo.com/nginx/nginx_intro.html" target="_blank" rel="noreferrer">https://www.w3ccoo.com/nginx/nginx_intro.html</a></p><h2 id="一、命令" tabindex="-1">一、命令： <a class="header-anchor" href="#一、命令" aria-label="Permalink to &quot;一、命令：&quot;">​</a></h2><h3 id="nginx-v-查看nginx的配置信息" tabindex="-1">nginx -V 查看nginx的配置信息 <a class="header-anchor" href="#nginx-v-查看nginx的配置信息" aria-label="Permalink to &quot;nginx -V  查看nginx的配置信息&quot;">​</a></h3><p><img src="'+p+`" alt=""></p><h3 id="nginx-t-测试nginx-conf是否通过" tabindex="-1">nginx -t 测试nginx_conf是否通过 <a class="header-anchor" href="#nginx-t-测试nginx-conf是否通过" aria-label="Permalink to &quot;nginx -t 测试nginx_conf是否通过&quot;">​</a></h3><h3 id="nginx-s-reload-重新加载配置文件" tabindex="-1">nginx -s reload 重新加载配置文件 <a class="header-anchor" href="#nginx-s-reload-重新加载配置文件" aria-label="Permalink to &quot;nginx -s reload 重新加载配置文件&quot;">​</a></h3><h3 id="nginx-s-stop-停止nginx服务" tabindex="-1">nginx -s stop 停止nginx服务 <a class="header-anchor" href="#nginx-s-stop-停止nginx服务" aria-label="Permalink to &quot;nginx -s stop 停止nginx服务&quot;">​</a></h3><h3 id="nginx-启动nginx" tabindex="-1">nginx 启动nginx <a class="header-anchor" href="#nginx-启动nginx" aria-label="Permalink to &quot;nginx  启动nginx&quot;">​</a></h3><h2 id="二、配置" tabindex="-1">二、配置 <a class="header-anchor" href="#二、配置" aria-label="Permalink to &quot;二、配置&quot;">​</a></h2><p>/opt/homebrew/etc/nginx/nginx.conf：nginx的配置文件</p><p>/opt/homebrew/var/www：资源默认文件夹</p><h3 id="_1、mine-type文件" tabindex="-1">1、mine.type文件 <a class="header-anchor" href="#_1、mine-type文件" aria-label="Permalink to &quot;1、mine.type文件&quot;">​</a></h3><p>文件在：/opt/homebrew/etc/nginx</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http {</span></span>
<span class="line"><span>    include       mime.types;</span></span>
<span class="line"><span>    # 是nginx用来定义文扩展名（.html .js .png）与MINIE类型映射关系的配置文件，nginx依赖它来配置HTTP响应的content-type头，却好浏览器能正确处理这些文件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>mime.types</p><p><img src="`+l+`" alt="image-20250428102903495"></p><p>常见的MINE类型</p><h4 id="_1-1-application-x-www-form-urlencoded" tabindex="-1">1.1 application/x-www-form-urlencoded <a class="header-anchor" href="#_1-1-application-x-www-form-urlencoded" aria-label="Permalink to &quot;1.1 application/x-www-form-urlencoded&quot;">​</a></h4><p>表单默认提交方式，</p><p>数据格式：<code>key1=value1&amp;key2=value2</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fetch(&quot;/api/login&quot;, {</span></span>
<span class="line"><span>  method: &quot;POST&quot;,</span></span>
<span class="line"><span>  headers: {</span></span>
<span class="line"><span>    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  body: &quot;username=John&amp;password=123456&quot;,</span></span>
<span class="line"><span>});</span></span></code></pre></div><h4 id="_1-2-multipart-form-data" tabindex="-1">1.2 multipart/form-data <a class="header-anchor" href="#_1-2-multipart-form-data" aria-label="Permalink to &quot;1.2 multipart/form-data&quot;">​</a></h4><p>分块传输，文件上传</p><img src="`+o+`" alt="image-20250428110627421" style="zoom:%;"><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const formData = new FormData();</span></span>
<span class="line"><span>formData.append(&quot;username&quot;, &quot;John&quot;);</span></span>
<span class="line"><span>formData.append(&quot;avatar&quot;, fileInput.files[0]);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fetch(&quot;/upload&quot;, {</span></span>
<span class="line"><span>  method: &quot;POST&quot;,</span></span>
<span class="line"><span>  body: formData,  // 自动设置 Content-Type 和 boundary</span></span>
<span class="line"><span>});</span></span></code></pre></div><p><img src="`+r+'" alt="image-20250428110544820"></p><h4 id="_1-3-三种数据传输的对比" tabindex="-1">1.3 三种数据传输的对比 <a class="header-anchor" href="#_1-3-三种数据传输的对比" aria-label="Permalink to &quot;1.3 三种数据传输的对比&quot;">​</a></h4><p><img src="'+h+`" alt="image-20250428110659160"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x-www-form-urlencoded</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/x-www-form-urlencoded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key=value&amp;key2=value2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// multipart/form-data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> formData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FormData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fileInput.files[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/upload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, body: formData });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// application/json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ key: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_2-、keepalive-timeout" tabindex="-1">2 、keepalive_timeout <a class="header-anchor" href="#_2-、keepalive-timeout" aria-label="Permalink to &quot;2 、keepalive_timeout&quot;">​</a></h3><p>一个tcp链接中可以等待的最长空闲时间，默认值75秒</p><h3 id="_3、核心配置指令" tabindex="-1">3、核心配置指令 <a class="header-anchor" href="#_3、核心配置指令" aria-label="Permalink to &quot;3、核心配置指令&quot;">​</a></h3><h4 id="_3-1-listen-监听的端口" tabindex="-1">3.1 listen：监听的端口 <a class="header-anchor" href="#_3-1-listen-监听的端口" aria-label="Permalink to &quot;3.1 listen：监听的端口&quot;">​</a></h4><h4 id="_3-2-server-name" tabindex="-1">3.2 server_name <a class="header-anchor" href="#_3-2-server-name" aria-label="Permalink to &quot;3.2 server_name&quot;">​</a></h4><p>一个ip可以绑定多个域名，可以在hosts文件中设置（模拟一个ip映射多个资源的情况）</p><img src="`+g+'" alt="image-20250428163449761" style="zoom:50%;"><p>server_name配置域名，实现多个域名访问同一个ip，但是访问的是不同的资源</p><p>server_name:_; 表示该虚拟主机为默认服务器</p><h4 id="_3-3-root和alias" tabindex="-1">3.3 root和alias <a class="header-anchor" href="#_3-3-root和alias" aria-label="Permalink to &quot;3.3 root和alias&quot;">​</a></h4><p><code>alias</code> 会 <strong>完全替换</strong> 匹配的路径部分，而不是拼接。</p><p><img src="'+c+'" alt="image-20250428172751178"></p><p>例子：</p><p><img src="'+d+'" alt="image-20250428173425559"></p><p><img src="'+m+'" alt="image-20250428173441757"></p><p><a href="http://8.134.38.38/static/index-CHcREjTY.js" target="_blank" rel="noreferrer">http://8.134.38.38/static/index-CHcREjTY.js</a></p><h4 id="_3-4-location" tabindex="-1">3.4 location <a class="header-anchor" href="#_3-4-location" aria-label="Permalink to &quot;3.4 location&quot;">​</a></h4><p>路由匹配规则：<a href="https://www.w3ccoo.com/nginx/nginx_command_localhost.html" target="_blank" rel="noreferrer">https://www.w3ccoo.com/nginx/nginx_command_localhost.html</a></p>',48),t("p",{"css-module":"."},"location [=|~|~*|^~|@] pattern",-1),s('<h5 id="_1-比如-完全-匹配" tabindex="-1">(1) 比如：= 完全 匹配 <a class="header-anchor" href="#_1-比如-完全-匹配" aria-label="Permalink to &quot;(1) 比如：= 完全 匹配&quot;">​</a></h5><p><img src="'+k+'" alt="image-20250428190202635"></p><p><img src="'+u+'" alt="image-20250428190219538"></p><h5 id="_2-重定向" tabindex="-1">(2) 重定向 <a class="header-anchor" href="#_2-重定向" aria-label="Permalink to &quot;(2) 重定向&quot;">​</a></h5><p>请求的状态码是307</p><p><img src="'+_+'" alt="image-20250428191253541"></p><p><img src="'+x+'" alt="image-20250428191537575"></p><p><img src="'+E+'" alt="image-20250428191644200"></p><h5 id="_3-重写" tabindex="-1">(3) 重写 <a class="header-anchor" href="#_3-重写" aria-label="Permalink to &quot;(3) 重写&quot;">​</a></h5><p>请求的状态码是200</p><p><img src="'+b+'" alt="image-20250428192024200"></p><p><img src="'+q+'" alt="image-20250428192007508"></p><p><img src="'+y+'" alt="image-20250428192154041"></p><h5 id="_4-try-files" tabindex="-1">(4) try_files <a class="header-anchor" href="#_4-try-files" aria-label="Permalink to &quot;(4) try_files&quot;">​</a></h5><p><img src="'+f+'" alt="image-20250428194248103"></p><h5 id="_5-error-page" tabindex="-1">(5) error_page <a class="header-anchor" href="#_5-error-page" aria-label="Permalink to &quot;(5) error_page&quot;">​</a></h5><p>设置状态码报错页面</p><p><img src="'+F+'" alt="image-20250428195419919"></p><p><img src="'+w+'" alt="image-20250428195428554"></p><h3 id="_4、nginx功能1-web服务器http" tabindex="-1">4、nginx功能1：web服务器http <a class="header-anchor" href="#_4、nginx功能1-web服务器http" aria-label="Permalink to &quot;4、nginx功能1：web服务器http&quot;">​</a></h3><p>参考</p><p><img src="'+v+'" alt="image-20250428162248684"></p><p>http：nginx http核心配置指令域，包含客户端完整 HTTP 请求过程中每个过程的处理方法的配置指令</p><h3 id="_5、nginx功能2-3-反向代理-负载均衡" tabindex="-1">5、nginx功能2&amp;3：反向代理+ 负载均衡 <a class="header-anchor" href="#_5、nginx功能2-3-反向代理-负载均衡" aria-label="Permalink to &quot;5、nginx功能2&amp;3：反向代理+ 负载均衡&quot;">​</a></h3><p><img src="'+C+'" alt="image-20250429102834098"></p><h5 id="反向代理-nginx代替服务端为客户端提供服务-客户端不知道服务端" tabindex="-1">反向代理：nginx代替服务端为客户端提供服务，客户端不知道服务端 <a class="header-anchor" href="#反向代理-nginx代替服务端为客户端提供服务-客户端不知道服务端" aria-label="Permalink to &quot;反向代理：nginx代替服务端为客户端提供服务，客户端不知道服务端&quot;">​</a></h5><p><img src="'+P+'" alt="image-20250429103154771"></p><h5 id="正向代理-代理服务器代替客户端向服务器请求资源-服务器不知道客户端" tabindex="-1">正向代理：代理服务器代替客户端向服务器请求资源，服务器不知道客户端 <a class="header-anchor" href="#正向代理-代理服务器代替客户端向服务器请求资源-服务器不知道客户端" aria-label="Permalink to &quot;正向代理：代理服务器代替客户端向服务器请求资源，服务器不知道客户端&quot;">​</a></h5><p>都是代理作为中间值，区别就是客户端和服务端互相知不知道</p><h5 id="负载均衡-用于将网络流量或计算任务合理分配到多个服务器节点-以提高系统性能、可靠性和可扩展性。" tabindex="-1">负载均衡：用于将网络流量或计算任务合理分配到多个服务器节点，以提高系统性能、可靠性和可扩展性。 <a class="header-anchor" href="#负载均衡-用于将网络流量或计算任务合理分配到多个服务器节点-以提高系统性能、可靠性和可扩展性。" aria-label="Permalink to &quot;负载均衡：用于将网络流量或计算任务合理分配到多个服务器节点，以提高系统性能、可靠性和可扩展性。&quot;">​</a></h5><p>下面是一个例子：</p><h4 id="_1-后台服务" tabindex="-1">1-后台服务 <a class="header-anchor" href="#_1-后台服务" aria-label="Permalink to &quot;1-后台服务&quot;">​</a></h4><p>使用node在后台跑两个服务</p><p><img src="'+B+'" alt="image-20250429141220714"><img src="'+D+'" alt="image-20250429141255072"></p><p>启动</p><p><img src="'+T+'" alt="image-20250429141313539"><img src="'+A+'" alt="image-20250429141322339"></p><h4 id="_2-配置nginx" tabindex="-1">2-配置nginx <a class="header-anchor" href="#_2-配置nginx" aria-label="Permalink to &quot;2-配置nginx&quot;">​</a></h4><h5 id="upstream-上游模块" tabindex="-1">upstream：上游模块 <a class="header-anchor" href="#upstream-上游模块" aria-label="Permalink to &quot;upstream：上游模块&quot;">​</a></h5><p>nginx通过代理模块的反向代理功能将用户请求转发到上游服务器租，上游模块通过制定的负载均衡策略及相关的参数配置将用户请求转发到目标服务器上。</p><p>例子：<img src="'+N+`" alt="image-20250429142349558"></p><p>两个节点，将流量引导两个节点上，减少服务器压力，如果那个服务器的配置更好点，可以设置权重高点</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>upstream backend {</span></span>
<span class="line"><span>  server 127.0.0.1:3000;</span></span>
<span class="line"><span>  server 127.0.0.1:3001;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>location /api {</span></span>
<span class="line"><span>   proxy_pass http://backend;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="_3-效果" tabindex="-1">3-效果 <a class="header-anchor" href="#_3-效果" aria-label="Permalink to &quot;3-效果&quot;">​</a></h4><p>浏览器运行</p><p><img src="`+S+'" alt="image-20250429142550394"></p><p><img src="'+V+'" alt="image-20250429142601630"></p><p>使用curl测试</p><p><img src="'+I+'" alt="image-20250429142654063"></p><p>两个端口轮训访问</p><h2 id="三、example" tabindex="-1">三、example <a class="header-anchor" href="#三、example" aria-label="Permalink to &quot;三、example&quot;">​</a></h2><h3 id="_1、自己的服务器-前端日志" tabindex="-1">1、自己的服务器：前端日志 <a class="header-anchor" href="#_1、自己的服务器-前端日志" aria-label="Permalink to &quot;1、自己的服务器：前端日志&quot;">​</a></h3><p>这个配置是nginx原来带有的参数：<a href="https://www.w3ccoo.com/nginx/nginx_log_access.html" target="_blank" rel="noreferrer">https://www.w3ccoo.com/nginx/nginx_log_access.html</a></p><p><img src="'+j+'" alt="image-20250429204203551"></p><p>任何请求都会保存在/var/log/nginx/access.log 文件中、</p><h5 id="如何获取客户端的原始ip" tabindex="-1">如何获取客户端的原始ip？ <a class="header-anchor" href="#如何获取客户端的原始ip" aria-label="Permalink to &quot;如何获取客户端的原始ip？&quot;">​</a></h5><p>当请求经过反向代理（如 Nginx、CDN、负载均衡器）时，客户端原始 IP 会被代理服务器的 IP 覆盖。<code>real_ip_header</code> 的作用是从特定 HTTP 头中提取真实 IP。</p><p>问题：nginx.conf文件中配置了<code>real_ip_header X-Forwarded-For; </code>在日志中没有显示？<img src="'+O+'" alt="image-20250429211123538"></p><h3 id="_2、项目里面实施" tabindex="-1">2、项目里面实施 <a class="header-anchor" href="#_2、项目里面实施" aria-label="Permalink to &quot;2、项目里面实施&quot;">​</a></h3><p><a href="http://docs.io.dreamdev.cn/front-end/engineering/log-collection.html#%E9%80%9A%E8%BF%87%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AC%E5%AD%98%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91sls" target="_blank" rel="noreferrer">http://docs.io.dreamdev.cn/front-end/engineering/log-collection.html#通过公司服务器转存到阿里云sls</a></p>',59)]))}const K=i(H,[["render",R]]);export{z as __pageData,K as default};
