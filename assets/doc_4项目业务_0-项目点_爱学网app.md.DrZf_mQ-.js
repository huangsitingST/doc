import{_ as n,c as e,o as p,ae as i,j as s}from"./chunks/framework.DD4G2i-B.js";const t="/doc/assets/image-20250414150038980.CD_SLLVY.png",l="/doc/assets/image-20250415085934261.CMOAxuTD.png",h="/doc/assets/image-20250415090046160.1yh0lPqq.png",o="/doc/assets/image-20250415092251334.Cheb1LYJ.png",k="/doc/assets/image-20250415103212705.Cf8tak-n.png",r="/doc/assets/image-20250415103403641.BlKbj5YJ.png",d="/doc/assets/image-20250415113510092.Dm0ZBaKW.png",c="/doc/assets/image-20250415222145114.Ckf1UvmR.png",g="/doc/assets/image-20250415213532702.DqpB7Y_2.png",E="/doc/assets/image-20250415222616124.DE1iCORr.png",u="/doc/assets/image-20250416094551632.BHIuuDh3.png",y="/doc/assets/image-20250416143004338.DBuQ_48V.png",_="/doc/assets/image-20250416110256391.n-dJ41m2.png",m="/doc/assets/image-20250416112831390.BwyhyOmf.png",B=JSON.parse('{"title":"爱学网app","description":"","frontmatter":{},"headers":[],"relativePath":"doc/4项目业务/0-项目点/爱学网app.md","filePath":"doc/4项目业务/0-项目点/爱学网app.md"}'),b={name:"doc/4项目业务/0-项目点/爱学网app.md"};function F(q,a,C,v,f,A){return p(),e("div",null,a[0]||(a[0]=[i('<h1 id="爱学网app" tabindex="-1">爱学网app <a class="header-anchor" href="#爱学网app" aria-label="Permalink to &quot;爱学网app&quot;">​</a></h1><p>工作内容：爱学网app实现AI答疑功能</p><p>需求内容：学生通过题目&amp;拍照上传图片可以进行和ai聊天解答题目</p><p>技术核心：大模型对话、科目提示词定位</p><p><img src="'+t+`" alt="image-20250414150038980"></p><h2 id="_1-上传图片的方式-拓展-文件上传的方式" tabindex="-1">1 上传图片的方式：拓展-文件上传的方式 <a class="header-anchor" href="#_1-上传图片的方式-拓展-文件上传的方式" aria-label="Permalink to &quot;1 上传图片的方式：拓展-文件上传的方式&quot;">​</a></h2><p>aliyun上传、七牛云上传</p><h2 id="_2-图片框题-识别图片的题目" tabindex="-1">2 图片框题&amp;识别图片的题目 <a class="header-anchor" href="#_2-图片框题-识别图片的题目" aria-label="Permalink to &quot;2 图片框题&amp;识别图片的题目&quot;">​</a></h2><p>使用阿里云集成的openai：<a href="https://apifox.com/apidoc/shared-2fd72ae0-84f1-4e2e-b210-8b204151d970" target="_blank" rel="noreferrer">https://apifox.com/apidoc/shared-2fd72ae0-84f1-4e2e-b210-8b204151d970</a></p><h2 id="_4-会话-指令id" tabindex="-1">4 会话：指令id <a class="header-anchor" href="#_4-会话-指令id" aria-label="Permalink to &quot;4 会话：指令id&quot;">​</a></h2><h2 id="_5-与安卓通信" tabindex="-1">5 与安卓通信 <a class="header-anchor" href="#_5-与安卓通信" aria-label="Permalink to &quot;5 与安卓通信&quot;">​</a></h2><p>使用js-bridge，核心是，应用端和h5端都把属性或者方法放在window下，两个端使用不同的方法去调用</p><p>应用端使用flutter，可以实现多端打包，虽然这么说，但是如果出现了不兼容的现象，其实也是应用端去做一个兼容解决</p><p>就像uniapp一样，也说是前端可以打包成h5、小程序、安卓、ios应用，但是有些兼容问题出现也需要通过代码和配置兼容</p><ul><li><p>h5调用native原生</p><p>应用端</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注入对象，应用端实际上是在window中存放应用端的对象，里面包含属性和方法供h5端调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addJavascriptInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsBridge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JSBridge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义注入的Jsbridge对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsBridge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @JavascriptInterface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takePhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callbackId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 调用相机并返回结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>h5调用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.JSBridge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takePhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;callback_123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>native调用h5</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Android获取H5页面标题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">evaluateJavascript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javascript:document.title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 去除JSON引号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>两种</p><ol><li><p>应用端监听到h5页面加载完毕后，可以执行</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;{&#39;key&#39;: &#39;value&#39;}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javascript:parseJson(&#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li><li><p>判断构建的版本看是否支持evaluateJavascript方式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Build.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SDK_INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Build.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VERSION_CODES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">KITKAT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    webView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">evaluateJavascript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javascript:getResult()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ValueCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @Override</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        public void </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onReceiveValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 处理 JS 返回的值（如 JSON 字符串）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    webView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javascript:getResult()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 低版本降级方案</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol></li></ul><h2 id="_6-鉴权方式" tabindex="-1">6 鉴权方式 <a class="header-anchor" href="#_6-鉴权方式" aria-label="Permalink to &quot;6 鉴权方式&quot;">​</a></h2><p>无状态 ===》有状态</p><h3 id="_6-1-basic-authentication" tabindex="-1">6.1 basic authentication <a class="header-anchor" href="#_6-1-basic-authentication" aria-label="Permalink to &quot;6.1 basic authentication&quot;">​</a></h3><p>通过将用户名密码<strong>Base64编码</strong>后的数据放在请求头<strong>Authorization</strong>中，服务端解码验证身份</p><h3 id="_6-2-session-cookie机制" tabindex="-1">6.2 session-cookie机制 <a class="header-anchor" href="#_6-2-session-cookie机制" aria-label="Permalink to &quot;6.2 session-cookie机制&quot;">​</a></h3><p>服务器创建session并生成唯一id，通过cookie传给客户端，cooke存在客户端中，后续请求是会自动传这个cookie验证在请求的set-cookie中</p><p>场景：用户在银行网站A中登陆，cookie处于有效中，可以在网站A植入恶意广告，用户点击进入网站B，网站B中引导用户点击，通过脚本方式之情转账请求，传的是相同cookie，服务端认为是正常操作。</p><p>这个操作就是CSRF攻击（通过伪造用户身份，利用目标网站对浏览器的信任机制（如Cookie中的会话凭证），执行未经授权的操作）</p><h3 id="_6-3-token验证" tabindex="-1">6.3 token验证 <a class="header-anchor" href="#_6-3-token验证" aria-label="Permalink to &quot;6.3 token验证&quot;">​</a></h3><h4 id="_1、什么是token验证-例子-jwt" tabindex="-1">1、什么是token验证&amp;例子：jwt <a class="header-anchor" href="#_1、什么是token验证-例子-jwt" aria-label="Permalink to &quot;1、什么是token验证&amp;例子：jwt&quot;">​</a></h4><p>公司统一认证方式</p><p>由后端根据用户名密码生成token（JWT：json web token），客户端存在请求的token中传递</p><p>jwt由三个部分构成：header.playload.signature</p><p>​ 算法 数据 服务端保存的一段字符串</p><img src="`+l+'" alt="image-20250415085934261" style="zoom:24%;"><img src="'+h+`" alt="image-20250415090046160" style="zoom:30%;"><p>公司的jwt例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>access_token: </span></span>
<span class="line"><span>&quot;eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiIxNjgxNzgwMjU3MTE1IiwiZXhwIjoxNzQ0NjY5NjA5LCJzdWIiOiIzMDkwNjUxODMxOTQ5Mzk1In0.oSHxncyj42ISGWweeT6COnaq4jUwtxVvNQPT26IIdax8fZFHZx90YJy8gveH-NwX-HhOj2j62iztwjpqgSDkIw&quot;</span></span></code></pre></div><img src="`+o+'" alt="image-20250415092251334" style="zoom:67%;"><h4 id="_2、例子-爱学网的登录例子" tabindex="-1">2、例子：爱学网的登录例子 <a class="header-anchor" href="#_2、例子-爱学网的登录例子" aria-label="Permalink to &quot;2、例子：爱学网的登录例子&quot;">​</a></h4><p><img src="'+k+'" alt="image-20250415103212705"></p><p><img src="'+r+`" alt="image-20250415103403641"></p><p>公司全部的token用的是sessionid做token，问了后端，这个token不做过期时间限制。</p><p>这个account_center这个可以跟第三方接口登录。</p><p>ps：公司的中台都不用鉴权的，直接传数据就可以请求。</p><div class="caution custom-block github-alert"><p class="custom-block-title">CAUTION</p><p></p><p>什么第三方使用场景</p></div><h4 id="_3、refresh-token" tabindex="-1">3、refresh-token <a class="header-anchor" href="#_3、refresh-token" aria-label="Permalink to &quot;3、refresh-token&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;access_token&quot;: &quot;eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiIxNjgxNzgwMjU3MTE1IiwiZXhwIjoxNzQ0NjkxMDEzLCJzdWIiOiIzNDgwNDAxNjkwMDM5NjYyIn0.CsR4EGLnpyT8WZ4VogcMfHHQwYDKqXeEnADfP3tP6o4LK-7qKp_fYqqVbjghBkbu8prDr4A28drmbiB6OY9ZmQ&quot;,</span></span>
<span class="line"><span>    &quot;expires_in&quot;: 7200,</span></span>
<span class="line"><span>    &quot;refresh_token&quot;: &quot;YJGXNGEYNZATZDLKOC01ZJI1LWEZNTATZWYWYWUYZDDJOGQ5&quot;,</span></span>
<span class="line"><span>    &quot;token_type&quot;: &quot;Bearer&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>access_token：短效</p><p>expires_in：过期时间2h</p><p>refresh_token：长效token</p><p><img src="`+d+'" alt="image-20250415113510092"></p><p>总结：在响应拦截中处理401未认证，使用refresh_token再去请求，如果未过期则可以更新access_token和refresh_token，如果refresh_token都过期了，则可以重新登录</p><h4 id="_4、sso-single-sign-on-单点登录-实现多系统统一认证" tabindex="-1">4、SSO：single sign on 单点登录（实现多系统统一认证） <a class="header-anchor" href="#_4、sso-single-sign-on-单点登录-实现多系统统一认证" aria-label="Permalink to &quot;4、SSO：single sign on 单点登录（实现多系统统一认证）&quot;">​</a></h4><p>测试网站：</p><p>教学研：<a href="https://ebag-test.readboy.com/teaching-learning-research/" target="_blank" rel="noreferrer">https://ebag-test.readboy.com/teaching-learning-research/</a></p><p>认证中心登录页：<a href="https://account-center-test.readboy.com/" target="_blank" rel="noreferrer">https://account-center-test.readboy.com/</a></p><h5 id="_4-1-逻辑图" tabindex="-1">4.1 逻辑图 <a class="header-anchor" href="#_4-1-逻辑图" aria-label="Permalink to &quot;4.1 逻辑图&quot;">​</a></h5><p>这里是公司单点登录的逻辑，业务网站例子是教学研</p><p>认证中心就是这个/v1/oauth2/authorize，如果请求中携带的cookie是合法的，那么就会返回code给业务网站，网站就可以拿这个code去获取login获取用户信息</p><p><img src="'+c+`" alt="image-20250415222145114"></p><p>分析下登录接口</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://api.ebag-test.readboy.com/login/v2/auth/token</span></span>
<span class="line"><span></span></span>
<span class="line"><span>F_code: YTRLMDU3ZTCTOGU5MS0ZM2ZHLTK5ZWUTMZI0NDNLYJEZOTC2</span></span>
<span class="line"><span>redirect_uri: https%3A%2F%2Febag-test.readboy.com%2Fteaching-learning-research%2F</span></span>
<span class="line"><span>F_from: 600000</span></span>
<span class="line"><span>userType: 2</span></span></code></pre></div><p><img src="`+g+`" alt="image-20250415213532702"></p><p>返回的数据中的sessionid是整个公司通用的token，account_token是与第三方协作的token数据</p><p>并且整个教学研的认证方式是query去传这个sessionid</p><h5 id="_4-2-核心要点" tabindex="-1">4.2 核心要点 <a class="header-anchor" href="#_4-2-核心要点" aria-label="Permalink to &quot;4.2 核心要点&quot;">​</a></h5><p>凡是进入到这个单点登录页面都要携带这个cookie，只有跟域名对应的cookie在控制台中采会显示出来</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://account-center-test.readboy.com/v1/oauth2/authorize?</span></span>
<span class="line"><span></span></span>
<span class="line"><span>client_id=1681780257115&amp;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>redirect_uri=https%3A%2F%2Febag-test.readboy.com%2Fteaching-learning-research%2F&amp;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>response_type=code</span></span></code></pre></div><p>认证中心判断这个cookie，这个cookie是认证中心产出的，登出cookie/有实效的cookie</p><ul><li>没有cookie，返回：{&quot;code&quot;:100400,&quot;data&quot;:</li><li>登出/过期的cookie：重定向到单点登录页面</li><li>合法的token：重定向到redirect_uri，且返回需要的response_type<img src="`+E+'" alt="image-20250415222616124"></li></ul><p>尝试：使用apifox调用认证中心的接口，使用登出的cookie去调上面的接口，是成功的<img src="'+u+`" alt="image-20250416094551632" style="zoom:70%;"></p><h4 id="_5、oauth2协议标准" tabindex="-1">5、OAuth2协议标准 <a class="header-anchor" href="#_5、oauth2协议标准" aria-label="Permalink to &quot;5、OAuth2协议标准&quot;">​</a></h4><p>阮一峰理解OAuth 2.0：<a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a></p><h5 id="_5-1-what" tabindex="-1">5.1 what <a class="header-anchor" href="#_5-1-what" aria-label="Permalink to &quot;5.1 what&quot;">​</a></h5><p>服务提供商 —— 授权层（authorization layer）—[限权token]—》 客户端（第三方）</p><p>​ ｜ ｜</p><p>​ ———————————————[限权token访问服务提供商]——————————</p><p>应用A中存在重要用户信息，当第三方用户数据想去访问的时候就需要由应用A去授权，即access_token，但是有时间期限</p><ul><li>首次登录就会返回access_token</li><li>后面再去访问的时候就可以携带这个access_token去访问</li><li>access_token到期可以使用refresh_token去更新</li><li>两个token都过期了就需要重新授权</li></ul><h5 id="_5-2-授权的四种方式" tabindex="-1">5.2 授权的四种方式 <a class="header-anchor" href="#_5-2-授权的四种方式" aria-label="Permalink to &quot;5.2 授权的四种方式&quot;">​</a></h5><p>阮一峰：<a href="https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html</a></p><ul><li><p>授权码（最完整、流程最严密的授权模式）</p><p>教学研用的授权码的方式，那这个code去获取token</p></li><li><p>密码式</p><p>爱学网web和app用的账号密码登录返回token</p></li><li><p>隐藏式</p><p>直接返回给A网站token</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//b.com/oauth/authorize?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  response_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  client_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CLIENT_ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  redirect_uri</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CALLBACK_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">read</span></span></code></pre></div><p><img src="`+y+`" alt="image-20250416143004338"></p></li><li><p>凭证式</p><p>A直接向B请求令牌</p></li></ul><h5 id="_5-3-公司应用的实例" tabindex="-1">5.3 公司应用的实例： <a class="header-anchor" href="#_5-3-公司应用的实例" aria-label="Permalink to &quot;5.3 公司应用的实例：&quot;">​</a></h5><p>中台（数据中心）===&gt; 教学研（第三方应用）</p><p>​ ===&gt; 爱学网（第三方应用）</p><p>两个子应用都是调的同一个登录接口：<a href="https://api.ebag-test.readboy.com/login/v2/auth/login" target="_blank" rel="noreferrer">https://api.ebag-test.readboy.com/login/v2/auth/login</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 教学研传参：使用认证完之后的code去登录</span></span>
<span class="line"><span>F_code: M2E2ODC2MDMTNTU5NI0ZZJRJLWIWYTCTMJIZMZA3YMU5NGE4  （中台认证返回的code）</span></span>
<span class="line"><span>redirect_uri: https://ebag-test.readboy.com/teaching-learning-research/</span></span>
<span class="line"><span>F_from: 600000</span></span>
<span class="line"><span>userType: 2</span></span>
<span class="line"><span>F_sign:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 爱学网传参：使用用户名密码</span></span>
<span class="line"><span>username: 13210000001</span></span>
<span class="line"><span>password: a123456</span></span>
<span class="line"><span>userType: 2</span></span>
<span class="line"><span>platform: 101</span></span>
<span class="line"><span>		爱学网app传参</span></span>
<span class="line"><span>username: a211</span></span>
<span class="line"><span>password: a123456</span></span>
<span class="line"><span>userType: 1</span></span>
<span class="line"><span>platform: 103</span></span>
<span class="line"><span>F_from: 600000</span></span></code></pre></div><p>返回的数据是一样的</p><p><img src="`+_+'" alt="image-20250416110256391"></p><h5 id="_5-4-更新令牌" tabindex="-1">5.4 更新令牌 <a class="header-anchor" href="#_5-4-更新令牌" aria-label="Permalink to &quot;5.4 更新令牌&quot;">​</a></h5><p>access_token和refresh_token结合过期时间去更新令牌，使用refresh_token去请求更新两个令牌</p><h5 id="_5-5-思考-如果用户的登录时间还没有过期-去认证中心应该是不用重新登录的-这个是怎么实现的" tabindex="-1">5.5 思考：如果用户的登录时间还没有过期，去认证中心应该是不用重新登录的，这个是怎么实现的？ <a class="header-anchor" href="#_5-5-思考-如果用户的登录时间还没有过期-去认证中心应该是不用重新登录的-这个是怎么实现的" aria-label="Permalink to &quot;5.5 思考：如果用户的登录时间还没有过期，去认证中心应该是不用重新登录的，这个是怎么实现的？&quot;">​</a></h5><p>正常来说，是需要带access_token去访问的，但是公司的认证不携带这个中台token，以及，中台的其他接口都没有做鉴权操作。<img src="'+m+'" alt="image-20250416112831390" style="zoom:70%;"></p><h5 id="_5-4-用户登录状态被挤掉" tabindex="-1">5.4 用户登录状态被挤掉？ <a class="header-anchor" href="#_5-4-用户登录状态被挤掉" aria-label="Permalink to &quot;5.4 用户登录状态被挤掉？&quot;">​</a></h5><p>后端的实现思路：</p>',91),s("ol",null,[s("li",{"uid:":"",sessionId1:""},"ip1登录，数据库中存"),s("li",{"uid:":"",sessionId2:""},"ip2使用相同uid登录，数据库中更新"),s("li",null,"ip1仍然用sessionId1去访问，数据库中比对不上，提示强制退出")],-1),i('<h4 id="_6、市面上的登录" tabindex="-1">6、市面上的登录 <a class="header-anchor" href="#_6、市面上的登录" aria-label="Permalink to &quot;6、市面上的登录&quot;">​</a></h4><ol><li><p>传统凭证方式</p><ol><li>用户名密码登录</li><li>手机号码+验证码</li></ol></li><li><p>第三方授权登录</p><ol><li><p>社交媒体：微信、支付宝、抖音、google、钉钉</p></li><li><p>政府/机构统一认证：</p><p>权威性较高的统一认证平台，用户注册后，第三方系统就可以使用sso授权登录</p></li></ol></li><li><p>生物识别：指纹、面部、虹膜扫描</p></li><li><p>无密码/新兴技术</p><ol><li>扫码登录</li><li>游客模式</li><li>单点登录</li></ol></li><li><p>特殊场景登录</p><ol><li>邀请码注册</li></ol></li></ol><p>7、MFA认证</p><p>Mutil-Factor Authentication。 解决两种及以上独立验证因素</p><p>8、阿里云的RAM用户</p><p>由主账户创建账户并分配权限</p>',6)]))}const w=n(b,[["render",F]]);export{B as __pageData,w as default};
